#include "SimplexNoise.h"

#include <cmath>

namespace SimplexNoise
{
	struct LatticeVec4DSLut
	{
		std::uint8_t length;
		std::uint8_t data[20];
	};

	static constexpr double c_SmoothN2 = 0.05481866495625118;
	static constexpr double c_SmoothN3 = 0.2781926117527186;
	static constexpr double c_SmoothN4 = 0.11127401889945551;

	static Grad2D s_SmoothGrad2Ds[2048] {};
	static Grad3D s_SmoothGrad3Ds[2048] {};
	static Grad4D s_SmoothGrad4Ds[2048] {};

	static LatticeTree3D   s_SmoothLatticeTree3D[8] {};
	static LatticePoint2D  s_SmoothLatticePoints2D[8 * 4] {};
	static LatticePoint3D  s_SmoothLatticePoints3D[8] {};
	static LatticePoint4DS s_SmoothLatticePoints4D[256] {};
	static LatticeVec4DS   s_SmoothLatticeVecs4D[256] {};

	static constexpr double c_N2 = 0.01001634121365712;
	static constexpr double c_N3 = 0.030485933181293584;
	static constexpr double c_N4 = 0.009202377986303158;

	static Grad2D s_Grad2Ds[2048] {};
	static Grad3D s_Grad3Ds[2048] {};
	static Grad4D s_Grad4Ds[2048] {};

	static LatticeTree3D   s_LatticeTree3D[8] {};
	static LatticePoint2D  s_LatticePoints2D[4] {};
	static LatticePoint3D  s_LatticePoints3D[8] {};
	static LatticePoint4DF s_LatticePoints4D[16] {};

	template <class T, std::size_t N>
	constexpr std::size_t Arrayof([[maybe_unused]] const T (&arr)[N])
	{
		return N;
	}

	static struct Init
	{
		Init()
		{
			{
				Grad2D grads[] {
					{0.130526192220052,   0.99144486137381  },
					{ 0.38268343236509,   0.923879532511287 },
					{ 0.608761429008721,  0.793353340291235 },
					{ 0.793353340291235,  0.608761429008721 },
					{ 0.923879532511287,  0.38268343236509  },
					{ 0.99144486137381,   0.130526192220051 },
					{ 0.99144486137381,   -0.130526192220051},
					{ 0.923879532511287,  -0.38268343236509 },
					{ 0.793353340291235,  -0.60876142900872 },
					{ 0.608761429008721,  -0.793353340291235},
					{ 0.38268343236509,   -0.923879532511287},
					{ 0.130526192220052,  -0.99144486137381 },
					{ -0.130526192220052, -0.99144486137381 },
					{ -0.38268343236509,  -0.923879532511287},
					{ -0.608761429008721, -0.793353340291235},
					{ -0.793353340291235, -0.608761429008721},
					{ -0.923879532511287, -0.38268343236509 },
					{ -0.99144486137381,  -0.130526192220052},
					{ -0.99144486137381,  0.130526192220051 },
					{ -0.923879532511287, 0.38268343236509  },
					{ -0.793353340291235, 0.608761429008721 },
					{ -0.608761429008721, 0.793353340291235 },
					{ -0.38268343236509,  0.923879532511287 },
					{ -0.130526192220052, 0.99144486137381  }
				};
				for (std::size_t i = 0; i < Arrayof(grads); ++i)
				{
					grads[i].dx /= c_N2;
					grads[i].dy /= c_N2;
				}
				for (std::size_t i = 0, j = 0; i < Arrayof(s_Grad2Ds); ++i, ++j)
				{
					if (j == Arrayof(grads))
						j = 0;
					s_Grad2Ds[i] = grads[j];
				}
			}
			{
				Grad3D grads[] {
					{-2.22474487139,       -2.22474487139,      -1.0               },
					{ -2.22474487139,      -2.22474487139,      1.0                },
					{ -3.0862664687972017, -1.1721513422464978, 0.0                },
					{ -1.1721513422464978, -3.0862664687972017, 0.0                },
					{ -2.22474487139,      -1.0,                -2.22474487139     },
					{ -2.22474487139,      1.0,                 -2.22474487139     },
					{ -1.1721513422464978, 0.0,                 -3.0862664687972017},
					{ -3.0862664687972017, 0.0,                 -1.1721513422464978},
					{ -2.22474487139,      -1.0,                2.22474487139      },
					{ -2.22474487139,      1.0,                 2.22474487139      },
					{ -3.0862664687972017, 0.0,                 1.1721513422464978 },
					{ -1.1721513422464978, 0.0,                 3.0862664687972017 },
					{ -2.22474487139,      2.22474487139,       -1.0               },
					{ -2.22474487139,      2.22474487139,       1.0                },
					{ -1.1721513422464978, 3.0862664687972017,  0.0                },
					{ -3.0862664687972017, 1.1721513422464978,  0.0                },
					{ -1.0,                -2.22474487139,      -2.22474487139     },
					{ 1.0,                 -2.22474487139,      -2.22474487139     },
					{ 0.0,                 -3.0862664687972017, -1.1721513422464978},
					{ 0.0,                 -1.1721513422464978, -3.0862664687972017},
					{ -1.0,                -2.22474487139,      2.22474487139      },
					{ 1.0,                 -2.22474487139,      2.22474487139      },
					{ 0.0,                 -1.1721513422464978, 3.0862664687972017 },
					{ 0.0,                 -3.0862664687972017, 1.1721513422464978 },
					{ -1.0,                2.22474487139,       -2.22474487139     },
					{ 1.0,                 2.22474487139,       -2.22474487139     },
					{ 0.0,                 1.1721513422464978,  -3.0862664687972017},
					{ 0.0,                 3.0862664687972017,  -1.1721513422464978},
					{ -1.0,                2.22474487139,       2.22474487139      },
					{ 1.0,                 2.22474487139,       2.22474487139      },
					{ 0.0,                 3.0862664687972017,  1.1721513422464978 },
					{ 0.0,                 1.1721513422464978,  3.0862664687972017 },
					{ 2.22474487139,       -2.22474487139,      -1.0               },
					{ 2.22474487139,       -2.22474487139,      1.0                },
					{ 1.1721513422464978,  -3.0862664687972017, 0.0                },
					{ 3.0862664687972017,  -1.1721513422464978, 0.0                },
					{ 2.22474487139,       -1.0,                -2.22474487139     },
					{ 2.22474487139,       1.0,                 -2.22474487139     },
					{ 3.0862664687972017,  0.0,                 -1.1721513422464978},
					{ 1.1721513422464978,  0.0,                 -3.0862664687972017},
					{ 2.22474487139,       -1.0,                2.22474487139      },
					{ 2.22474487139,       1.0,                 2.22474487139      },
					{ 1.1721513422464978,  0.0,                 3.0862664687972017 },
					{ 3.0862664687972017,  0.0,                 1.1721513422464978 },
					{ 2.22474487139,       2.22474487139,       -1.0               },
					{ 2.22474487139,       2.22474487139,       1.0                },
					{ 3.0862664687972017,  1.1721513422464978,  0.0                },
					{ 1.1721513422464978,  3.0862664687972017,  0.0                }
				};
				for (std::size_t i = 0; i < Arrayof(grads); ++i)
				{
					grads[i].dx /= c_N3;
					grads[i].dy /= c_N3;
					grads[i].dz /= c_N3;
				}
				for (std::size_t i = 0, j = 0; i < Arrayof(s_Grad3Ds); ++i, ++j)
				{
					if (j == Arrayof(grads))
						j = 0;
					s_Grad3Ds[i] = grads[j];
				}
			}
			{
				Grad4D grads[] {
					{-0.753341017856078,     -0.37968289875261624,  -0.37968289875261624,  -0.37968289875261624 },
					{ -0.7821684431180708,   -0.4321472685365301,   -0.4321472685365301,   0.12128480194602098  },
					{ -0.7821684431180708,   -0.4321472685365301,   0.12128480194602098,   -0.4321472685365301  },
					{ -0.7821684431180708,   0.12128480194602098,   -0.4321472685365301,   -0.4321472685365301  },
					{ -0.8586508742123365,   -0.508629699630796,    0.044802370851755174,  0.044802370851755174 },
					{ -0.8586508742123365,   0.044802370851755174,  -0.508629699630796,    0.044802370851755174 },
					{ -0.8586508742123365,   0.044802370851755174,  0.044802370851755174,  -0.508629699630796   },
					{ -0.9982828964265062,   -0.03381941603233842,  -0.03381941603233842,  -0.03381941603233842 },
					{ -0.37968289875261624,  -0.753341017856078,    -0.37968289875261624,  -0.37968289875261624 },
					{ -0.4321472685365301,   -0.7821684431180708,   -0.4321472685365301,   0.12128480194602098  },
					{ -0.4321472685365301,   -0.7821684431180708,   0.12128480194602098,   -0.4321472685365301  },
					{ 0.12128480194602098,   -0.7821684431180708,   -0.4321472685365301,   -0.4321472685365301  },
					{ -0.508629699630796,    -0.8586508742123365,   0.044802370851755174,  0.044802370851755174 },
					{ 0.044802370851755174,  -0.8586508742123365,   -0.508629699630796,    0.044802370851755174 },
					{ 0.044802370851755174,  -0.8586508742123365,   0.044802370851755174,  -0.508629699630796   },
					{ -0.03381941603233842,  -0.9982828964265062,   -0.03381941603233842,  -0.03381941603233842 },
					{ -0.37968289875261624,  -0.37968289875261624,  -0.753341017856078,    -0.37968289875261624 },
					{ -0.4321472685365301,   -0.4321472685365301,   -0.7821684431180708,   0.12128480194602098  },
					{ -0.4321472685365301,   0.12128480194602098,   -0.7821684431180708,   -0.4321472685365301  },
					{ 0.12128480194602098,   -0.4321472685365301,   -0.7821684431180708,   -0.4321472685365301  },
					{ -0.508629699630796,    0.044802370851755174,  -0.8586508742123365,   0.044802370851755174 },
					{ 0.044802370851755174,  -0.508629699630796,    -0.8586508742123365,   0.044802370851755174 },
					{ 0.044802370851755174,  0.044802370851755174,  -0.8586508742123365,   -0.508629699630796   },
					{ -0.03381941603233842,  -0.03381941603233842,  -0.9982828964265062,   -0.03381941603233842 },
					{ -0.37968289875261624,  -0.37968289875261624,  -0.37968289875261624,  -0.753341017856078   },
					{ -0.4321472685365301,   -0.4321472685365301,   0.12128480194602098,   -0.7821684431180708  },
					{ -0.4321472685365301,   0.12128480194602098,   -0.4321472685365301,   -0.7821684431180708  },
					{ 0.12128480194602098,   -0.4321472685365301,   -0.4321472685365301,   -0.7821684431180708  },
					{ -0.508629699630796,    0.044802370851755174,  0.044802370851755174,  -0.8586508742123365  },
					{ 0.044802370851755174,  -0.508629699630796,    0.044802370851755174,  -0.8586508742123365  },
					{ 0.044802370851755174,  0.044802370851755174,  -0.508629699630796,    -0.8586508742123365  },
					{ -0.03381941603233842,  -0.03381941603233842,  -0.03381941603233842,  -0.9982828964265062  },
					{ -0.6740059517812944,   -0.3239847771997537,   -0.3239847771997537,   0.5794684678643381   },
					{ -0.7504883828755602,   -0.4004672082940195,   0.15296486218853164,   0.5029860367700724   },
					{ -0.7504883828755602,   0.15296486218853164,   -0.4004672082940195,   0.5029860367700724   },
					{ -0.8828161875373585,   0.08164729285680945,   0.08164729285680945,   0.4553054119602712   },
					{ -0.4553054119602712,   -0.08164729285680945,  -0.08164729285680945,  0.8828161875373585   },
					{ -0.5029860367700724,   -0.15296486218853164,  0.4004672082940195,    0.7504883828755602   },
					{ -0.5029860367700724,   0.4004672082940195,    -0.15296486218853164,  0.7504883828755602   },
					{ -0.5794684678643381,   0.3239847771997537,    0.3239847771997537,    0.6740059517812944   },
					{ -0.3239847771997537,   -0.6740059517812944,   -0.3239847771997537,   0.5794684678643381   },
					{ -0.4004672082940195,   -0.7504883828755602,   0.15296486218853164,   0.5029860367700724   },
					{ 0.15296486218853164,   -0.7504883828755602,   -0.4004672082940195,   0.5029860367700724   },
					{ 0.08164729285680945,   -0.8828161875373585,   0.08164729285680945,   0.4553054119602712   },
					{ -0.08164729285680945,  -0.4553054119602712,   -0.08164729285680945,  0.8828161875373585   },
					{ -0.15296486218853164,  -0.5029860367700724,   0.4004672082940195,    0.7504883828755602   },
					{ 0.4004672082940195,    -0.5029860367700724,   -0.15296486218853164,  0.7504883828755602   },
					{ 0.3239847771997537,    -0.5794684678643381,   0.3239847771997537,    0.6740059517812944   },
					{ -0.3239847771997537,   -0.3239847771997537,   -0.6740059517812944,   0.5794684678643381   },
					{ -0.4004672082940195,   0.15296486218853164,   -0.7504883828755602,   0.5029860367700724   },
					{ 0.15296486218853164,   -0.4004672082940195,   -0.7504883828755602,   0.5029860367700724   },
					{ 0.08164729285680945,   0.08164729285680945,   -0.8828161875373585,   0.4553054119602712   },
					{ -0.08164729285680945,  -0.08164729285680945,  -0.4553054119602712,   0.8828161875373585   },
					{ -0.15296486218853164,  0.4004672082940195,    -0.5029860367700724,   0.7504883828755602   },
					{ 0.4004672082940195,    -0.15296486218853164,  -0.5029860367700724,   0.7504883828755602   },
					{ 0.3239847771997537,    0.3239847771997537,    -0.5794684678643381,   0.6740059517812944   },
					{ -0.6740059517812944,   -0.3239847771997537,   0.5794684678643381,    -0.3239847771997537  },
					{ -0.7504883828755602,   -0.4004672082940195,   0.5029860367700724,    0.15296486218853164  },
					{ -0.7504883828755602,   0.15296486218853164,   0.5029860367700724,    -0.4004672082940195  },
					{ -0.8828161875373585,   0.08164729285680945,   0.4553054119602712,    0.08164729285680945  },
					{ -0.4553054119602712,   -0.08164729285680945,  0.8828161875373585,    -0.08164729285680945 },
					{ -0.5029860367700724,   -0.15296486218853164,  0.7504883828755602,    0.4004672082940195   },
					{ -0.5029860367700724,   0.4004672082940195,    0.7504883828755602,    -0.15296486218853164 },
					{ -0.5794684678643381,   0.3239847771997537,    0.6740059517812944,    0.3239847771997537   },
					{ -0.3239847771997537,   -0.6740059517812944,   0.5794684678643381,    -0.3239847771997537  },
					{ -0.4004672082940195,   -0.7504883828755602,   0.5029860367700724,    0.15296486218853164  },
					{ 0.15296486218853164,   -0.7504883828755602,   0.5029860367700724,    -0.4004672082940195  },
					{ 0.08164729285680945,   -0.8828161875373585,   0.4553054119602712,    0.08164729285680945  },
					{ -0.08164729285680945,  -0.4553054119602712,   0.8828161875373585,    -0.08164729285680945 },
					{ -0.15296486218853164,  -0.5029860367700724,   0.7504883828755602,    0.4004672082940195   },
					{ 0.4004672082940195,    -0.5029860367700724,   0.7504883828755602,    -0.15296486218853164 },
					{ 0.3239847771997537,    -0.5794684678643381,   0.6740059517812944,    0.3239847771997537   },
					{ -0.3239847771997537,   -0.3239847771997537,   0.5794684678643381,    -0.6740059517812944  },
					{ -0.4004672082940195,   0.15296486218853164,   0.5029860367700724,    -0.7504883828755602  },
					{ 0.15296486218853164,   -0.4004672082940195,   0.5029860367700724,    -0.7504883828755602  },
					{ 0.08164729285680945,   0.08164729285680945,   0.4553054119602712,    -0.8828161875373585  },
					{ -0.08164729285680945,  -0.08164729285680945,  0.8828161875373585,    -0.4553054119602712  },
					{ -0.15296486218853164,  0.4004672082940195,    0.7504883828755602,    -0.5029860367700724  },
					{ 0.4004672082940195,    -0.15296486218853164,  0.7504883828755602,    -0.5029860367700724  },
					{ 0.3239847771997537,    0.3239847771997537,    0.6740059517812944,    -0.5794684678643381  },
					{ -0.6740059517812944,   0.5794684678643381,    -0.3239847771997537,   -0.3239847771997537  },
					{ -0.7504883828755602,   0.5029860367700724,    -0.4004672082940195,   0.15296486218853164  },
					{ -0.7504883828755602,   0.5029860367700724,    0.15296486218853164,   -0.4004672082940195  },
					{ -0.8828161875373585,   0.4553054119602712,    0.08164729285680945,   0.08164729285680945  },
					{ -0.4553054119602712,   0.8828161875373585,    -0.08164729285680945,  -0.08164729285680945 },
					{ -0.5029860367700724,   0.7504883828755602,    -0.15296486218853164,  0.4004672082940195   },
					{ -0.5029860367700724,   0.7504883828755602,    0.4004672082940195,    -0.15296486218853164 },
					{ -0.5794684678643381,   0.6740059517812944,    0.3239847771997537,    0.3239847771997537   },
					{ -0.3239847771997537,   0.5794684678643381,    -0.6740059517812944,   -0.3239847771997537  },
					{ -0.4004672082940195,   0.5029860367700724,    -0.7504883828755602,   0.15296486218853164  },
					{ 0.15296486218853164,   0.5029860367700724,    -0.7504883828755602,   -0.4004672082940195  },
					{ 0.08164729285680945,   0.4553054119602712,    -0.8828161875373585,   0.08164729285680945  },
					{ -0.08164729285680945,  0.8828161875373585,    -0.4553054119602712,   -0.08164729285680945 },
					{ -0.15296486218853164,  0.7504883828755602,    -0.5029860367700724,   0.4004672082940195   },
					{ 0.4004672082940195,    0.7504883828755602,    -0.5029860367700724,   -0.15296486218853164 },
					{ 0.3239847771997537,    0.6740059517812944,    -0.5794684678643381,   0.3239847771997537   },
					{ -0.3239847771997537,   0.5794684678643381,    -0.3239847771997537,   -0.6740059517812944  },
					{ -0.4004672082940195,   0.5029860367700724,    0.15296486218853164,   -0.7504883828755602  },
					{ 0.15296486218853164,   0.5029860367700724,    -0.4004672082940195,   -0.7504883828755602  },
					{ 0.08164729285680945,   0.4553054119602712,    0.08164729285680945,   -0.8828161875373585  },
					{ -0.08164729285680945,  0.8828161875373585,    -0.08164729285680945,  -0.4553054119602712  },
					{ -0.15296486218853164,  0.7504883828755602,    0.4004672082940195,    -0.5029860367700724  },
					{ 0.4004672082940195,    0.7504883828755602,    -0.15296486218853164,  -0.5029860367700724  },
					{ 0.3239847771997537,    0.6740059517812944,    0.3239847771997537,    -0.5794684678643381  },
					{ 0.5794684678643381,    -0.6740059517812944,   -0.3239847771997537,   -0.3239847771997537  },
					{ 0.5029860367700724,    -0.7504883828755602,   -0.4004672082940195,   0.15296486218853164  },
					{ 0.5029860367700724,    -0.7504883828755602,   0.15296486218853164,   -0.4004672082940195  },
					{ 0.4553054119602712,    -0.8828161875373585,   0.08164729285680945,   0.08164729285680945  },
					{ 0.8828161875373585,    -0.4553054119602712,   -0.08164729285680945,  -0.08164729285680945 },
					{ 0.7504883828755602,    -0.5029860367700724,   -0.15296486218853164,  0.4004672082940195   },
					{ 0.7504883828755602,    -0.5029860367700724,   0.4004672082940195,    -0.15296486218853164 },
					{ 0.6740059517812944,    -0.5794684678643381,   0.3239847771997537,    0.3239847771997537   },
					{ 0.5794684678643381,    -0.3239847771997537,   -0.6740059517812944,   -0.3239847771997537  },
					{ 0.5029860367700724,    -0.4004672082940195,   -0.7504883828755602,   0.15296486218853164  },
					{ 0.5029860367700724,    0.15296486218853164,   -0.7504883828755602,   -0.4004672082940195  },
					{ 0.4553054119602712,    0.08164729285680945,   -0.8828161875373585,   0.08164729285680945  },
					{ 0.8828161875373585,    -0.08164729285680945,  -0.4553054119602712,   -0.08164729285680945 },
					{ 0.7504883828755602,    -0.15296486218853164,  -0.5029860367700724,   0.4004672082940195   },
					{ 0.7504883828755602,    0.4004672082940195,    -0.5029860367700724,   -0.15296486218853164 },
					{ 0.6740059517812944,    0.3239847771997537,    -0.5794684678643381,   0.3239847771997537   },
					{ 0.5794684678643381,    -0.3239847771997537,   -0.3239847771997537,   -0.6740059517812944  },
					{ 0.5029860367700724,    -0.4004672082940195,   0.15296486218853164,   -0.7504883828755602  },
					{ 0.5029860367700724,    0.15296486218853164,   -0.4004672082940195,   -0.7504883828755602  },
					{ 0.4553054119602712,    0.08164729285680945,   0.08164729285680945,   -0.8828161875373585  },
					{ 0.8828161875373585,    -0.08164729285680945,  -0.08164729285680945,  -0.4553054119602712  },
					{ 0.7504883828755602,    -0.15296486218853164,  0.4004672082940195,    -0.5029860367700724  },
					{ 0.7504883828755602,    0.4004672082940195,    -0.15296486218853164,  -0.5029860367700724  },
					{ 0.6740059517812944,    0.3239847771997537,    0.3239847771997537,    -0.5794684678643381  },
					{ 0.03381941603233842,   0.03381941603233842,   0.03381941603233842,   0.9982828964265062   },
					{ -0.044802370851755174, -0.044802370851755174, 0.508629699630796,     0.8586508742123365   },
					{ -0.044802370851755174, 0.508629699630796,     -0.044802370851755174, 0.8586508742123365   },
					{ -0.12128480194602098,  0.4321472685365301,    0.4321472685365301,    0.7821684431180708   },
					{ 0.508629699630796,     -0.044802370851755174, -0.044802370851755174, 0.8586508742123365   },
					{ 0.4321472685365301,    -0.12128480194602098,  0.4321472685365301,    0.7821684431180708   },
					{ 0.4321472685365301,    0.4321472685365301,    -0.12128480194602098,  0.7821684431180708   },
					{ 0.37968289875261624,   0.37968289875261624,   0.37968289875261624,   0.753341017856078    },
					{ 0.03381941603233842,   0.03381941603233842,   0.9982828964265062,    0.03381941603233842  },
					{ -0.044802370851755174, 0.044802370851755174,  0.8586508742123365,    0.508629699630796    },
					{ -0.044802370851755174, 0.508629699630796,     0.8586508742123365,    -0.044802370851755174},
					{ -0.12128480194602098,  0.4321472685365301,    0.7821684431180708,    0.4321472685365301   },
					{ 0.508629699630796,     -0.044802370851755174, 0.8586508742123365,    -0.044802370851755174},
					{ 0.4321472685365301,    -0.12128480194602098,  0.7821684431180708,    0.4321472685365301   },
					{ 0.4321472685365301,    0.4321472685365301,    0.7821684431180708,    -0.12128480194602098 },
					{ 0.37968289875261624,   0.37968289875261624,   0.753341017856078,     0.37968289875261624  },
					{ 0.03381941603233842,   0.9982828964265062,    0.03381941603233842,   0.03381941603233842  },
					{ -0.044802370851755174, 0.8586508742123365,    -0.044802370851755174, 0.508629699630796    },
					{ -0.044802370851755174, 0.8586508742123365,    0.508629699630796,     -0.044802370851755174},
					{ -0.12128480194602098,  0.7821684431180708,    0.4321472685365301,    0.4321472685365301   },
					{ 0.508629699630796,     0.8586508742123365,    -0.044802370851755174, -0.044802370851755174},
					{ 0.4321472685365301,    0.7821684431180708,    -0.12128480194602098,  0.4321472685365301   },
					{ 0.4321472685365301,    0.7821684431180708,    0.4321472685365301,    -0.12128480194602098 },
					{ 0.37968289875261624,   0.753341017856078,     0.37968289875261624,   0.37968289875261624  },
					{ 0.9982828964265062,    0.03381941603233842,   0.03381941603233842,   0.03381941603233842  },
					{ 0.8586508742123365,    -0.044802370851755174, -0.044802370851755174, 0.508629699630796    },
					{ 0.8586508742123365,    -0.044802370851755174, 0.508629699630796,     -0.044802370851755174},
					{ 0.7821684431180708,    -0.12128480194602098,  0.4321472685365301,    0.4321472685365301   },
					{ 0.8586508742123365,    0.508629699630796,     -0.044802370851755174, -0.044802370851755174},
					{ 0.7821684431180708,    0.4321472685365301,    -0.12128480194602098,  0.4321472685365301   },
					{ 0.7821684431180708,    0.4321472685365301,    0.4321472685365301,    -0.12128480194602098 },
					{ 0.753341017856078,     0.37968289875261624,   0.37968289875261624,   0.37968289875261624  }
				};
				for (std::size_t i = 0; i < Arrayof(grads); ++i)
				{
					grads[i].dx /= c_N4;
					grads[i].dy /= c_N4;
					grads[i].dz /= c_N4;
					grads[i].dw /= c_N4;
				}
				for (std::size_t i = 0, j = 0; i < Arrayof(s_Grad4Ds); ++i, ++j)
				{
					if (j == Arrayof(grads))
						j = 0;
					s_Grad4Ds[i] = grads[j];
				}
			}


			{
				Grad2D grads[] {
					{0.130526192220052,   0.99144486137381  },
					{ 0.38268343236509,   0.923879532511287 },
					{ 0.608761429008721,  0.793353340291235 },
					{ 0.793353340291235,  0.608761429008721 },
					{ 0.923879532511287,  0.38268343236509  },
					{ 0.99144486137381,   0.130526192220051 },
					{ 0.99144486137381,   -0.130526192220051},
					{ 0.923879532511287,  -0.38268343236509 },
					{ 0.793353340291235,  -0.60876142900872 },
					{ 0.608761429008721,  -0.793353340291235},
					{ 0.38268343236509,   -0.923879532511287},
					{ 0.130526192220052,  -0.99144486137381 },
					{ -0.130526192220052, -0.99144486137381 },
					{ -0.38268343236509,  -0.923879532511287},
					{ -0.608761429008721, -0.793353340291235},
					{ -0.793353340291235, -0.608761429008721},
					{ -0.923879532511287, -0.38268343236509 },
					{ -0.99144486137381,  -0.130526192220052},
					{ -0.99144486137381,  0.130526192220051 },
					{ -0.923879532511287, 0.38268343236509  },
					{ -0.793353340291235, 0.608761429008721 },
					{ -0.608761429008721, 0.793353340291235 },
					{ -0.38268343236509,  0.923879532511287 },
					{ -0.130526192220052, 0.99144486137381  }
				};
				for (std::size_t i = 0; i < Arrayof(grads); ++i)
				{
					grads[i].dx /= c_SmoothN2;
					grads[i].dy /= c_SmoothN2;
				}
				for (std::size_t i = 0, j = 0; i < Arrayof(s_SmoothGrad2Ds); ++i, ++j)
				{
					if (j == Arrayof(grads))
						j = 0;
					s_SmoothGrad2Ds[i] = grads[j];
				}
			}
			{
				Grad3D grads[] {
					{-2.22474487139,       -2.22474487139,      -1.0               },
					{ -2.22474487139,      -2.22474487139,      1.0                },
					{ -3.0862664687972017, -1.1721513422464978, 0.0                },
					{ -1.1721513422464978, -3.0862664687972017, 0.0                },
					{ -2.22474487139,      -1.0,                -2.22474487139     },
					{ -2.22474487139,      1.0,                 -2.22474487139     },
					{ -1.1721513422464978, 0.0,                 -3.0862664687972017},
					{ -3.0862664687972017, 0.0,                 -1.1721513422464978},
					{ -2.22474487139,      -1.0,                2.22474487139      },
					{ -2.22474487139,      1.0,                 2.22474487139      },
					{ -3.0862664687972017, 0.0,                 1.1721513422464978 },
					{ -1.1721513422464978, 0.0,                 3.0862664687972017 },
					{ -2.22474487139,      2.22474487139,       -1.0               },
					{ -2.22474487139,      2.22474487139,       1.0                },
					{ -1.1721513422464978, 3.0862664687972017,  0.0                },
					{ -3.0862664687972017, 1.1721513422464978,  0.0                },
					{ -1.0,                -2.22474487139,      -2.22474487139     },
					{ 1.0,                 -2.22474487139,      -2.22474487139     },
					{ 0.0,                 -3.0862664687972017, -1.1721513422464978},
					{ 0.0,                 -1.1721513422464978, -3.0862664687972017},
					{ -1.0,                -2.22474487139,      2.22474487139      },
					{ 1.0,                 -2.22474487139,      2.22474487139      },
					{ 0.0,                 -1.1721513422464978, 3.0862664687972017 },
					{ 0.0,                 -3.0862664687972017, 1.1721513422464978 },
					{ -1.0,                2.22474487139,       -2.22474487139     },
					{ 1.0,                 2.22474487139,       -2.22474487139     },
					{ 0.0,                 1.1721513422464978,  -3.0862664687972017},
					{ 0.0,                 3.0862664687972017,  -1.1721513422464978},
					{ -1.0,                2.22474487139,       2.22474487139      },
					{ 1.0,                 2.22474487139,       2.22474487139      },
					{ 0.0,                 3.0862664687972017,  1.1721513422464978 },
					{ 0.0,                 1.1721513422464978,  3.0862664687972017 },
					{ 2.22474487139,       -2.22474487139,      -1.0               },
					{ 2.22474487139,       -2.22474487139,      1.0                },
					{ 1.1721513422464978,  -3.0862664687972017, 0.0                },
					{ 3.0862664687972017,  -1.1721513422464978, 0.0                },
					{ 2.22474487139,       -1.0,                -2.22474487139     },
					{ 2.22474487139,       1.0,                 -2.22474487139     },
					{ 3.0862664687972017,  0.0,                 -1.1721513422464978},
					{ 1.1721513422464978,  0.0,                 -3.0862664687972017},
					{ 2.22474487139,       -1.0,                2.22474487139      },
					{ 2.22474487139,       1.0,                 2.22474487139      },
					{ 1.1721513422464978,  0.0,                 3.0862664687972017 },
					{ 3.0862664687972017,  0.0,                 1.1721513422464978 },
					{ 2.22474487139,       2.22474487139,       -1.0               },
					{ 2.22474487139,       2.22474487139,       1.0                },
					{ 3.0862664687972017,  1.1721513422464978,  0.0                },
					{ 1.1721513422464978,  3.0862664687972017,  0.0                }
				};
				for (std::size_t i = 0; i < Arrayof(grads); ++i)
				{
					grads[i].dx /= c_SmoothN3;
					grads[i].dy /= c_SmoothN3;
					grads[i].dz /= c_SmoothN3;
				}
				for (std::size_t i = 0, j = 0; i < Arrayof(s_SmoothGrad3Ds); ++i, ++j)
				{
					if (j == Arrayof(grads))
						j = 0;
					s_SmoothGrad3Ds[i] = grads[j];
				}
			}
			{
				Grad4D grads[] {
					{-0.753341017856078,     -0.37968289875261624,  -0.37968289875261624,  -0.37968289875261624 },
					{ -0.7821684431180708,   -0.4321472685365301,   -0.4321472685365301,   0.12128480194602098  },
					{ -0.7821684431180708,   -0.4321472685365301,   0.12128480194602098,   -0.4321472685365301  },
					{ -0.7821684431180708,   0.12128480194602098,   -0.4321472685365301,   -0.4321472685365301  },
					{ -0.8586508742123365,   -0.508629699630796,    0.044802370851755174,  0.044802370851755174 },
					{ -0.8586508742123365,   0.044802370851755174,  -0.508629699630796,    0.044802370851755174 },
					{ -0.8586508742123365,   0.044802370851755174,  0.044802370851755174,  -0.508629699630796   },
					{ -0.9982828964265062,   -0.03381941603233842,  -0.03381941603233842,  -0.03381941603233842 },
					{ -0.37968289875261624,  -0.753341017856078,    -0.37968289875261624,  -0.37968289875261624 },
					{ -0.4321472685365301,   -0.7821684431180708,   -0.4321472685365301,   0.12128480194602098  },
					{ -0.4321472685365301,   -0.7821684431180708,   0.12128480194602098,   -0.4321472685365301  },
					{ 0.12128480194602098,   -0.7821684431180708,   -0.4321472685365301,   -0.4321472685365301  },
					{ -0.508629699630796,    -0.8586508742123365,   0.044802370851755174,  0.044802370851755174 },
					{ 0.044802370851755174,  -0.8586508742123365,   -0.508629699630796,    0.044802370851755174 },
					{ 0.044802370851755174,  -0.8586508742123365,   0.044802370851755174,  -0.508629699630796   },
					{ -0.03381941603233842,  -0.9982828964265062,   -0.03381941603233842,  -0.03381941603233842 },
					{ -0.37968289875261624,  -0.37968289875261624,  -0.753341017856078,    -0.37968289875261624 },
					{ -0.4321472685365301,   -0.4321472685365301,   -0.7821684431180708,   0.12128480194602098  },
					{ -0.4321472685365301,   0.12128480194602098,   -0.7821684431180708,   -0.4321472685365301  },
					{ 0.12128480194602098,   -0.4321472685365301,   -0.7821684431180708,   -0.4321472685365301  },
					{ -0.508629699630796,    0.044802370851755174,  -0.8586508742123365,   0.044802370851755174 },
					{ 0.044802370851755174,  -0.508629699630796,    -0.8586508742123365,   0.044802370851755174 },
					{ 0.044802370851755174,  0.044802370851755174,  -0.8586508742123365,   -0.508629699630796   },
					{ -0.03381941603233842,  -0.03381941603233842,  -0.9982828964265062,   -0.03381941603233842 },
					{ -0.37968289875261624,  -0.37968289875261624,  -0.37968289875261624,  -0.753341017856078   },
					{ -0.4321472685365301,   -0.4321472685365301,   0.12128480194602098,   -0.7821684431180708  },
					{ -0.4321472685365301,   0.12128480194602098,   -0.4321472685365301,   -0.7821684431180708  },
					{ 0.12128480194602098,   -0.4321472685365301,   -0.4321472685365301,   -0.7821684431180708  },
					{ -0.508629699630796,    0.044802370851755174,  0.044802370851755174,  -0.8586508742123365  },
					{ 0.044802370851755174,  -0.508629699630796,    0.044802370851755174,  -0.8586508742123365  },
					{ 0.044802370851755174,  0.044802370851755174,  -0.508629699630796,    -0.8586508742123365  },
					{ -0.03381941603233842,  -0.03381941603233842,  -0.03381941603233842,  -0.9982828964265062  },
					{ -0.6740059517812944,   -0.3239847771997537,   -0.3239847771997537,   0.5794684678643381   },
					{ -0.7504883828755602,   -0.4004672082940195,   0.15296486218853164,   0.5029860367700724   },
					{ -0.7504883828755602,   0.15296486218853164,   -0.4004672082940195,   0.5029860367700724   },
					{ -0.8828161875373585,   0.08164729285680945,   0.08164729285680945,   0.4553054119602712   },
					{ -0.4553054119602712,   -0.08164729285680945,  -0.08164729285680945,  0.8828161875373585   },
					{ -0.5029860367700724,   -0.15296486218853164,  0.4004672082940195,    0.7504883828755602   },
					{ -0.5029860367700724,   0.4004672082940195,    -0.15296486218853164,  0.7504883828755602   },
					{ -0.5794684678643381,   0.3239847771997537,    0.3239847771997537,    0.6740059517812944   },
					{ -0.3239847771997537,   -0.6740059517812944,   -0.3239847771997537,   0.5794684678643381   },
					{ -0.4004672082940195,   -0.7504883828755602,   0.15296486218853164,   0.5029860367700724   },
					{ 0.15296486218853164,   -0.7504883828755602,   -0.4004672082940195,   0.5029860367700724   },
					{ 0.08164729285680945,   -0.8828161875373585,   0.08164729285680945,   0.4553054119602712   },
					{ -0.08164729285680945,  -0.4553054119602712,   -0.08164729285680945,  0.8828161875373585   },
					{ -0.15296486218853164,  -0.5029860367700724,   0.4004672082940195,    0.7504883828755602   },
					{ 0.4004672082940195,    -0.5029860367700724,   -0.15296486218853164,  0.7504883828755602   },
					{ 0.3239847771997537,    -0.5794684678643381,   0.3239847771997537,    0.6740059517812944   },
					{ -0.3239847771997537,   -0.3239847771997537,   -0.6740059517812944,   0.5794684678643381   },
					{ -0.4004672082940195,   0.15296486218853164,   -0.7504883828755602,   0.5029860367700724   },
					{ 0.15296486218853164,   -0.4004672082940195,   -0.7504883828755602,   0.5029860367700724   },
					{ 0.08164729285680945,   0.08164729285680945,   -0.8828161875373585,   0.4553054119602712   },
					{ -0.08164729285680945,  -0.08164729285680945,  -0.4553054119602712,   0.8828161875373585   },
					{ -0.15296486218853164,  0.4004672082940195,    -0.5029860367700724,   0.7504883828755602   },
					{ 0.4004672082940195,    -0.15296486218853164,  -0.5029860367700724,   0.7504883828755602   },
					{ 0.3239847771997537,    0.3239847771997537,    -0.5794684678643381,   0.6740059517812944   },
					{ -0.6740059517812944,   -0.3239847771997537,   0.5794684678643381,    -0.3239847771997537  },
					{ -0.7504883828755602,   -0.4004672082940195,   0.5029860367700724,    0.15296486218853164  },
					{ -0.7504883828755602,   0.15296486218853164,   0.5029860367700724,    -0.4004672082940195  },
					{ -0.8828161875373585,   0.08164729285680945,   0.4553054119602712,    0.08164729285680945  },
					{ -0.4553054119602712,   -0.08164729285680945,  0.8828161875373585,    -0.08164729285680945 },
					{ -0.5029860367700724,   -0.15296486218853164,  0.7504883828755602,    0.4004672082940195   },
					{ -0.5029860367700724,   0.4004672082940195,    0.7504883828755602,    -0.15296486218853164 },
					{ -0.5794684678643381,   0.3239847771997537,    0.6740059517812944,    0.3239847771997537   },
					{ -0.3239847771997537,   -0.6740059517812944,   0.5794684678643381,    -0.3239847771997537  },
					{ -0.4004672082940195,   -0.7504883828755602,   0.5029860367700724,    0.15296486218853164  },
					{ 0.15296486218853164,   -0.7504883828755602,   0.5029860367700724,    -0.4004672082940195  },
					{ 0.08164729285680945,   -0.8828161875373585,   0.4553054119602712,    0.08164729285680945  },
					{ -0.08164729285680945,  -0.4553054119602712,   0.8828161875373585,    -0.08164729285680945 },
					{ -0.15296486218853164,  -0.5029860367700724,   0.7504883828755602,    0.4004672082940195   },
					{ 0.4004672082940195,    -0.5029860367700724,   0.7504883828755602,    -0.15296486218853164 },
					{ 0.3239847771997537,    -0.5794684678643381,   0.6740059517812944,    0.3239847771997537   },
					{ -0.3239847771997537,   -0.3239847771997537,   0.5794684678643381,    -0.6740059517812944  },
					{ -0.4004672082940195,   0.15296486218853164,   0.5029860367700724,    -0.7504883828755602  },
					{ 0.15296486218853164,   -0.4004672082940195,   0.5029860367700724,    -0.7504883828755602  },
					{ 0.08164729285680945,   0.08164729285680945,   0.4553054119602712,    -0.8828161875373585  },
					{ -0.08164729285680945,  -0.08164729285680945,  0.8828161875373585,    -0.4553054119602712  },
					{ -0.15296486218853164,  0.4004672082940195,    0.7504883828755602,    -0.5029860367700724  },
					{ 0.4004672082940195,    -0.15296486218853164,  0.7504883828755602,    -0.5029860367700724  },
					{ 0.3239847771997537,    0.3239847771997537,    0.6740059517812944,    -0.5794684678643381  },
					{ -0.6740059517812944,   0.5794684678643381,    -0.3239847771997537,   -0.3239847771997537  },
					{ -0.7504883828755602,   0.5029860367700724,    -0.4004672082940195,   0.15296486218853164  },
					{ -0.7504883828755602,   0.5029860367700724,    0.15296486218853164,   -0.4004672082940195  },
					{ -0.8828161875373585,   0.4553054119602712,    0.08164729285680945,   0.08164729285680945  },
					{ -0.4553054119602712,   0.8828161875373585,    -0.08164729285680945,  -0.08164729285680945 },
					{ -0.5029860367700724,   0.7504883828755602,    -0.15296486218853164,  0.4004672082940195   },
					{ -0.5029860367700724,   0.7504883828755602,    0.4004672082940195,    -0.15296486218853164 },
					{ -0.5794684678643381,   0.6740059517812944,    0.3239847771997537,    0.3239847771997537   },
					{ -0.3239847771997537,   0.5794684678643381,    -0.6740059517812944,   -0.3239847771997537  },
					{ -0.4004672082940195,   0.5029860367700724,    -0.7504883828755602,   0.15296486218853164  },
					{ 0.15296486218853164,   0.5029860367700724,    -0.7504883828755602,   -0.4004672082940195  },
					{ 0.08164729285680945,   0.4553054119602712,    -0.8828161875373585,   0.08164729285680945  },
					{ -0.08164729285680945,  0.8828161875373585,    -0.4553054119602712,   -0.08164729285680945 },
					{ -0.15296486218853164,  0.7504883828755602,    -0.5029860367700724,   0.4004672082940195   },
					{ 0.4004672082940195,    0.7504883828755602,    -0.5029860367700724,   -0.15296486218853164 },
					{ 0.3239847771997537,    0.6740059517812944,    -0.5794684678643381,   0.3239847771997537   },
					{ -0.3239847771997537,   0.5794684678643381,    -0.3239847771997537,   -0.6740059517812944  },
					{ -0.4004672082940195,   0.5029860367700724,    0.15296486218853164,   -0.7504883828755602  },
					{ 0.15296486218853164,   0.5029860367700724,    -0.4004672082940195,   -0.7504883828755602  },
					{ 0.08164729285680945,   0.4553054119602712,    0.08164729285680945,   -0.8828161875373585  },
					{ -0.08164729285680945,  0.8828161875373585,    -0.08164729285680945,  -0.4553054119602712  },
					{ -0.15296486218853164,  0.7504883828755602,    0.4004672082940195,    -0.5029860367700724  },
					{ 0.4004672082940195,    0.7504883828755602,    -0.15296486218853164,  -0.5029860367700724  },
					{ 0.3239847771997537,    0.6740059517812944,    0.3239847771997537,    -0.5794684678643381  },
					{ 0.5794684678643381,    -0.6740059517812944,   -0.3239847771997537,   -0.3239847771997537  },
					{ 0.5029860367700724,    -0.7504883828755602,   -0.4004672082940195,   0.15296486218853164  },
					{ 0.5029860367700724,    -0.7504883828755602,   0.15296486218853164,   -0.4004672082940195  },
					{ 0.4553054119602712,    -0.8828161875373585,   0.08164729285680945,   0.08164729285680945  },
					{ 0.8828161875373585,    -0.4553054119602712,   -0.08164729285680945,  -0.08164729285680945 },
					{ 0.7504883828755602,    -0.5029860367700724,   -0.15296486218853164,  0.4004672082940195   },
					{ 0.7504883828755602,    -0.5029860367700724,   0.4004672082940195,    -0.15296486218853164 },
					{ 0.6740059517812944,    -0.5794684678643381,   0.3239847771997537,    0.3239847771997537   },
					{ 0.5794684678643381,    -0.3239847771997537,   -0.6740059517812944,   -0.3239847771997537  },
					{ 0.5029860367700724,    -0.4004672082940195,   -0.7504883828755602,   0.15296486218853164  },
					{ 0.5029860367700724,    0.15296486218853164,   -0.7504883828755602,   -0.4004672082940195  },
					{ 0.4553054119602712,    0.08164729285680945,   -0.8828161875373585,   0.08164729285680945  },
					{ 0.8828161875373585,    -0.08164729285680945,  -0.4553054119602712,   -0.08164729285680945 },
					{ 0.7504883828755602,    -0.15296486218853164,  -0.5029860367700724,   0.4004672082940195   },
					{ 0.7504883828755602,    0.4004672082940195,    -0.5029860367700724,   -0.15296486218853164 },
					{ 0.6740059517812944,    0.3239847771997537,    -0.5794684678643381,   0.3239847771997537   },
					{ 0.5794684678643381,    -0.3239847771997537,   -0.3239847771997537,   -0.6740059517812944  },
					{ 0.5029860367700724,    -0.4004672082940195,   0.15296486218853164,   -0.7504883828755602  },
					{ 0.5029860367700724,    0.15296486218853164,   -0.4004672082940195,   -0.7504883828755602  },
					{ 0.4553054119602712,    0.08164729285680945,   0.08164729285680945,   -0.8828161875373585  },
					{ 0.8828161875373585,    -0.08164729285680945,  -0.08164729285680945,  -0.4553054119602712  },
					{ 0.7504883828755602,    -0.15296486218853164,  0.4004672082940195,    -0.5029860367700724  },
					{ 0.7504883828755602,    0.4004672082940195,    -0.15296486218853164,  -0.5029860367700724  },
					{ 0.6740059517812944,    0.3239847771997537,    0.3239847771997537,    -0.5794684678643381  },
					{ 0.03381941603233842,   0.03381941603233842,   0.03381941603233842,   0.9982828964265062   },
					{ -0.044802370851755174, -0.044802370851755174, 0.508629699630796,     0.8586508742123365   },
					{ -0.044802370851755174, 0.508629699630796,     -0.044802370851755174, 0.8586508742123365   },
					{ -0.12128480194602098,  0.4321472685365301,    0.4321472685365301,    0.7821684431180708   },
					{ 0.508629699630796,     -0.044802370851755174, -0.044802370851755174, 0.8586508742123365   },
					{ 0.4321472685365301,    -0.12128480194602098,  0.4321472685365301,    0.7821684431180708   },
					{ 0.4321472685365301,    0.4321472685365301,    -0.12128480194602098,  0.7821684431180708   },
					{ 0.37968289875261624,   0.37968289875261624,   0.37968289875261624,   0.753341017856078    },
					{ 0.03381941603233842,   0.03381941603233842,   0.9982828964265062,    0.03381941603233842  },
					{ -0.044802370851755174, 0.044802370851755174,  0.8586508742123365,    0.508629699630796    },
					{ -0.044802370851755174, 0.508629699630796,     0.8586508742123365,    -0.044802370851755174},
					{ -0.12128480194602098,  0.4321472685365301,    0.7821684431180708,    0.4321472685365301   },
					{ 0.508629699630796,     -0.044802370851755174, 0.8586508742123365,    -0.044802370851755174},
					{ 0.4321472685365301,    -0.12128480194602098,  0.7821684431180708,    0.4321472685365301   },
					{ 0.4321472685365301,    0.4321472685365301,    0.7821684431180708,    -0.12128480194602098 },
					{ 0.37968289875261624,   0.37968289875261624,   0.753341017856078,     0.37968289875261624  },
					{ 0.03381941603233842,   0.9982828964265062,    0.03381941603233842,   0.03381941603233842  },
					{ -0.044802370851755174, 0.8586508742123365,    -0.044802370851755174, 0.508629699630796    },
					{ -0.044802370851755174, 0.8586508742123365,    0.508629699630796,     -0.044802370851755174},
					{ -0.12128480194602098,  0.7821684431180708,    0.4321472685365301,    0.4321472685365301   },
					{ 0.508629699630796,     0.8586508742123365,    -0.044802370851755174, -0.044802370851755174},
					{ 0.4321472685365301,    0.7821684431180708,    -0.12128480194602098,  0.4321472685365301   },
					{ 0.4321472685365301,    0.7821684431180708,    0.4321472685365301,    -0.12128480194602098 },
					{ 0.37968289875261624,   0.753341017856078,     0.37968289875261624,   0.37968289875261624  },
					{ 0.9982828964265062,    0.03381941603233842,   0.03381941603233842,   0.03381941603233842  },
					{ 0.8586508742123365,    -0.044802370851755174, -0.044802370851755174, 0.508629699630796    },
					{ 0.8586508742123365,    -0.044802370851755174, 0.508629699630796,     -0.044802370851755174},
					{ 0.7821684431180708,    -0.12128480194602098,  0.4321472685365301,    0.4321472685365301   },
					{ 0.8586508742123365,    0.508629699630796,     -0.044802370851755174, -0.044802370851755174},
					{ 0.7821684431180708,    0.4321472685365301,    -0.12128480194602098,  0.4321472685365301   },
					{ 0.7821684431180708,    0.4321472685365301,    0.4321472685365301,    -0.12128480194602098 },
					{ 0.753341017856078,     0.37968289875261624,   0.37968289875261624,   0.37968289875261624  }
				};
				for (std::size_t i = 0; i < Arrayof(grads); ++i)
				{
					grads[i].dx /= c_SmoothN4;
					grads[i].dy /= c_SmoothN4;
					grads[i].dz /= c_SmoothN4;
					grads[i].dw /= c_SmoothN4;
				}
				for (std::size_t i = 0, j = 0; i < Arrayof(s_SmoothGrad4Ds); ++i, ++j)
				{
					if (j == Arrayof(grads))
						j = 0;
					s_SmoothGrad4Ds[i] = grads[j];
				}
			}

			{
				s_LatticePoints2D[0] = NewLatticePoint2D(1, 0);
				s_LatticePoints2D[1] = NewLatticePoint2D(0, 0);
				s_LatticePoints2D[2] = NewLatticePoint2D(1, 1);
				s_LatticePoints2D[3] = NewLatticePoint2D(0, 1);
			}

			{
				for (std::size_t i = 0; i < 8; ++i)
				{
					std::int64_t i1, j1, k1, i2, j2, k2;
					i1 = (i >> 0) & 1;
					j1 = (i >> 1) & 1;
					k1 = (i >> 2) & 1;
					i2 = i1 ^ 1;
					j2 = j1 ^ 1;
					k2 = k1 ^ 1;

					LatticeTree3D& tree = s_LatticeTree3D[i];
					LatticePoint3D c0   = NewLatticePoint3D(i1, j1, k1, 0);
					tree.c1             = NewLatticePoint3D(i1 + i2, j1 + j2, k1 + k2, 1);
					tree.c2             = NewLatticePoint3D(i1 ^ 1, j1, k1, 0);
					tree.c3             = NewLatticePoint3D(i1, j1 ^ 1, k1, 0);
					tree.c4             = NewLatticePoint3D(i1, j1, k1 ^ 1, 0);
					tree.c5             = NewLatticePoint3D(i1 + (i2 ^ 1), j1 + j2, k1 + k2, 1);
					tree.c6             = NewLatticePoint3D(i1 + i2, j1 + (j2 ^ 1), k1 + k2, 1);
					tree.c7             = NewLatticePoint3D(i1 + i2, j1 + j2, k1 + (k2 ^ 1), 1);

					c0.nextOnFailure = c0.nextOnSuccess = &tree.c1;
					tree.c1.nextOnFailure = tree.c1.nextOnSuccess = &tree.c2;

					tree.c2.nextOnFailure = &tree.c3;
					tree.c2.nextOnSuccess = &tree.c6;
					tree.c3.nextOnFailure = &tree.c4;
					tree.c3.nextOnSuccess = &tree.c5;
					tree.c4.nextOnFailure = tree.c4.nextOnSuccess = &tree.c5;

					tree.c4.nextOnFailure = &tree.c6;
					tree.c5.nextOnSuccess = nullptr;
					tree.c6.nextOnFailure = &tree.c7;
					tree.c6.nextOnSuccess = nullptr;
					tree.c7.nextOnFailure = tree.c7.nextOnSuccess = nullptr;

					s_LatticePoints3D[i] = c0;
				}
			}

			{
				for (std::size_t i = 0; i < 16; ++i)
				{
					s_LatticePoints4D[i] = NewLatticePoint4DF((i >> 0) & 1, (i >> 1) & 1, (i >> 2) & 1, (i >> 3) & 1);
				}
			}

			{
				for (std::size_t i = 0; i < 8; ++i)
				{
					int i1, j1, i2, j2;
					if ((i & 1) == 0)
					{
						if ((i & 2) == 0)
						{
							i1 = -1;
							j1 = 0;
						}
						else
						{
							i1 = 1;
							j1 = 0;
						}
						if ((i & 4) == 0)
						{
							i2 = 0;
							j2 = -1;
						}
						else
						{
							i2 = 0;
							j2 = 1;
						}
					}
					else
					{
						if ((i & 2) != 0)
						{
							i1 = 2;
							j1 = 1;
						}
						else
						{
							i1 = 0;
							j1 = 1;
						}
						if ((i & 4) != 0)
						{
							i2 = 1;
							j2 = 2;
						}
						else
						{
							i2 = 1;
							j2 = 0;
						}
					}
					s_SmoothLatticePoints2D[i * 4 + 0] = NewLatticePoint2D(0, 0);
					s_SmoothLatticePoints2D[i * 4 + 1] = NewLatticePoint2D(1, 1);
					s_SmoothLatticePoints2D[i * 4 + 2] = NewLatticePoint2D(i1, j1);
					s_SmoothLatticePoints2D[i * 4 + 3] = NewLatticePoint2D(i2, j2);
				}
			}

			{
				for (std::size_t i = 0; i < 8; ++i)
				{
					int i1, j1, k1, i2, j2, k2;
					i1 = (i >> 0) & 1;
					j1 = (i >> 1) & 1;
					k1 = (i >> 2) & 1;
					i2 = i1 ^ 1;
					j2 = j1 ^ 1;
					k2 = k1 ^ 1;

					LatticeTree3D& tree = s_SmoothLatticeTree3D[i];
					LatticePoint3D c0   = NewLatticePoint3D(i1, j1, k1, 0);
					tree.c1             = NewLatticePoint3D(i1 + i2, j1 + j2, k1 + k2, 1);
					tree.c2             = NewLatticePoint3D(i1 ^ 1, j1, k1, 0);
					tree.c3             = NewLatticePoint3D(i1, j1 ^ 1, k1 ^ 1, 0);
					tree.c4             = NewLatticePoint3D(i1 + (i2 ^ 1), j1 + j2, k1 + k2, 1);
					tree.c5             = NewLatticePoint3D(i1 + i2, j1 + (j2 ^ 1), k1 + (k2 ^ 1), 1);
					tree.c6             = NewLatticePoint3D(i1, j1 ^ 1, k1, 0);
					tree.c7             = NewLatticePoint3D(i1 ^ 1, j1, k1 ^ 1, 0);
					tree.c8             = NewLatticePoint3D(i1 + i2, j1 + (j2 ^ 1), k1 + k2, 1);
					tree.c9             = NewLatticePoint3D(i1 + (i2 ^ 1), j1 + j2, k1 + (k2 ^ 1), 1);
					tree.cA             = NewLatticePoint3D(i1, j1, k1 ^ 1, 0);
					tree.cB             = NewLatticePoint3D(i1 ^ 1, j1 ^ 1, k1, 0);
					tree.cC             = NewLatticePoint3D(i1 + i2, j1 + j2, k1 + (k2 ^ 1), 1);
					tree.cD             = NewLatticePoint3D(i1 + (i2 ^ 1), j1 + (j2 ^ 1), k1 + k2, 1);

					c0.nextOnFailure = c0.nextOnSuccess = &tree.c1;
					tree.c1.nextOnFailure = tree.c1.nextOnSuccess = &tree.c2;

					tree.c2.nextOnFailure = &tree.c3;
					tree.c2.nextOnSuccess = &tree.c5;
					tree.c3.nextOnFailure = &tree.c4;
					tree.c3.nextOnSuccess = &tree.c4;

					tree.c4.nextOnFailure = &tree.c5;
					tree.c4.nextOnSuccess = &tree.c6;
					tree.c5.nextOnFailure = tree.c5.nextOnSuccess = &tree.c6;

					tree.c6.nextOnFailure = &tree.c7;
					tree.c6.nextOnSuccess = &tree.c9;
					tree.c7.nextOnFailure = &tree.c8;
					tree.c7.nextOnSuccess = &tree.c8;

					tree.c8.nextOnFailure = &tree.c9;
					tree.c8.nextOnSuccess = &tree.cA;
					tree.c9.nextOnFailure = tree.c9.nextOnSuccess = &tree.cA;

					tree.cA.nextOnFailure = &tree.cB;
					tree.cA.nextOnSuccess = &tree.cD;
					tree.cB.nextOnFailure = &tree.cC;
					tree.cB.nextOnSuccess = &tree.cC;

					tree.cC.nextOnFailure = &tree.cD;
					tree.cC.nextOnSuccess = nullptr;
					tree.cD.nextOnFailure = tree.cD.nextOnSuccess = nullptr;

					s_SmoothLatticePoints3D[i] = c0;
				}
			}

			{
				LatticeVec4DSLut lut[] {
					{20,  { 0x15, 0x45, 0x51, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA }},
					{ 15, { 0x15, 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xAA }                              },
					{ 16, { 0x1, 0x5, 0x11, 0x15, 0x41, 0x45, 0x51, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA }                          },
					{ 17, { 0x1, 0x15, 0x16, 0x45, 0x46, 0x51, 0x52, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB }                   },
					{ 15, { 0x15, 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA9, 0xAA }                              },
					{ 16, { 0x5, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xAA }                         },
					{ 12, { 0x5, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xAA }                                                 },
					{ 15, { 0x5, 0x15, 0x16, 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xAA, 0xAB }                               },
					{ 16, { 0x4, 0x5, 0x14, 0x15, 0x44, 0x45, 0x54, 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA }                          },
					{ 12, { 0x5, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xAA }                                                 },
					{ 10, { 0x5, 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x9A, 0xAA }                                                             },
					{ 14, { 0x5, 0x15, 0x16, 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x5B, 0x6A, 0x9A, 0xAA, 0xAB }                                     },
					{ 17, { 0x4, 0x15, 0x19, 0x45, 0x49, 0x54, 0x55, 0x58, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE }                   },
					{ 15, { 0x5, 0x15, 0x19, 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xAA, 0xAE }                               },
					{ 14, { 0x5, 0x15, 0x19, 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x5E, 0x6A, 0x9A, 0xAA, 0xAE }                                     },
					{ 17, { 0x5, 0x15, 0x1A, 0x45, 0x4A, 0x55, 0x56, 0x59, 0x5A, 0x5B, 0x5E, 0x6A, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF }                   },
					{ 15, { 0x15, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0xA5, 0xA6, 0xA9, 0xAA }                              },
					{ 16, { 0x11, 0x15, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xAA }                        },
					{ 12, { 0x11, 0x15, 0x51, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x96, 0xA6, 0xAA }                                                },
					{ 15, { 0x11, 0x15, 0x16, 0x51, 0x52, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x96, 0xA6, 0xAA, 0xAB }                              },
					{ 16, { 0x14, 0x15, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA9, 0xAA }                        },
					{ 14, { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x9A, 0xA6, 0xA9, 0xAA }                                    },
					{ 14, { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB }                                    },
					{ 13, { 0x15, 0x16, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x6B, 0x96, 0x9A, 0xA6, 0xAA, 0xAB }                                          },
					{ 12, { 0x14, 0x15, 0x54, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x99, 0xA9, 0xAA }                                                },
					{ 14, { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE }                                    },
					{ 11, { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x9A, 0xAA }                                                      },
					{ 12, { 0x15, 0x16, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x6B, 0x9A, 0xAA, 0xAB }                                                },
					{ 15, { 0x14, 0x15, 0x19, 0x54, 0x55, 0x58, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x99, 0xA9, 0xAA, 0xAE }                              },
					{ 13, { 0x15, 0x19, 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x6E, 0x99, 0x9A, 0xA9, 0xAA, 0xAE }                                          },
					{ 12, { 0x15, 0x19, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x6E, 0x9A, 0xAA, 0xAE }                                                },
					{ 14, { 0x15, 0x1A, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x6B, 0x6E, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF }                                    },
					{ 16, { 0x10, 0x11, 0x14, 0x15, 0x50, 0x51, 0x54, 0x55, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA }                        },
					{ 12, { 0x11, 0x15, 0x51, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xAA }                                                },
					{ 10, { 0x11, 0x15, 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0xA6, 0xAA }                                                            },
					{ 14, { 0x11, 0x15, 0x16, 0x51, 0x52, 0x55, 0x56, 0x65, 0x66, 0x67, 0x6A, 0xA6, 0xAA, 0xAB }                                    },
					{ 12, { 0x14, 0x15, 0x54, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA9, 0xAA }                                                },
					{ 14, { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA }                                    },
					{ 11, { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA6, 0xAA }                                                      },
					{ 12, { 0x15, 0x16, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x6B, 0xA6, 0xAA, 0xAB }                                                },
					{ 10, { 0x14, 0x15, 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0xA9, 0xAA }                                                            },
					{ 11, { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA9, 0xAA }                                                      },
					{ 10, { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xAA }                                                            },
					{ 13, { 0x15, 0x16, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6B, 0xAA, 0xAB }                                          },
					{ 14, { 0x14, 0x15, 0x19, 0x54, 0x55, 0x58, 0x59, 0x65, 0x69, 0x6A, 0x6D, 0xA9, 0xAA, 0xAE }                                    },
					{ 12, { 0x15, 0x19, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x6E, 0xA9, 0xAA, 0xAE }                                                },
					{ 13, { 0x15, 0x19, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6E, 0xAA, 0xAE }                                          },
					{ 15, { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x69, 0x6A, 0x6B, 0x6E, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF }                              },
					{ 17, { 0x10, 0x15, 0x25, 0x51, 0x54, 0x55, 0x61, 0x64, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA }                  },
					{ 15, { 0x11, 0x15, 0x25, 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xAA, 0xBA }                              },
					{ 14, { 0x11, 0x15, 0x25, 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x6A, 0x76, 0xA6, 0xAA, 0xBA }                                    },
					{ 17, { 0x11, 0x15, 0x26, 0x51, 0x55, 0x56, 0x62, 0x65, 0x66, 0x67, 0x6A, 0x76, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB }                  },
					{ 15, { 0x14, 0x15, 0x25, 0x54, 0x55, 0x59, 0x64, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA9, 0xAA, 0xBA }                              },
					{ 13, { 0x15, 0x25, 0x55, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA }                                          },
					{ 12, { 0x15, 0x25, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xA6, 0xAA, 0xBA }                                                },
					{ 14, { 0x15, 0x26, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x6B, 0x7A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB }                                    },
					{ 14, { 0x14, 0x15, 0x25, 0x54, 0x55, 0x59, 0x64, 0x65, 0x69, 0x6A, 0x79, 0xA9, 0xAA, 0xBA }                                    },
					{ 12, { 0x15, 0x25, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xA9, 0xAA, 0xBA }                                                },
					{ 13, { 0x15, 0x25, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x7A, 0xAA, 0xBA }                                          },
					{ 15, { 0x15, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6B, 0x7A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB }                              },
					{ 17, { 0x14, 0x15, 0x29, 0x54, 0x55, 0x59, 0x65, 0x68, 0x69, 0x6A, 0x6D, 0x79, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE }                  },
					{ 14, { 0x15, 0x29, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x6E, 0x7A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE }                                    },
					{ 15, { 0x15, 0x55, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6E, 0x7A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE }                              },
					{ 17, { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x6B, 0x6E, 0x7A, 0xAA, 0xAB, 0xAE, 0xBA, 0xBF }                  },
					{ 15, { 0x45, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA }                              },
					{ 16, { 0x41, 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xAA }                        },
					{ 12, { 0x41, 0x45, 0x51, 0x55, 0x56, 0x5A, 0x66, 0x95, 0x96, 0x9A, 0xA6, 0xAA }                                                },
					{ 15, { 0x41, 0x45, 0x46, 0x51, 0x52, 0x55, 0x56, 0x5A, 0x66, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB }                              },
					{ 16, { 0x44, 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA9, 0xAA }                        },
					{ 14, { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA }                                    },
					{ 14, { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xAB }                                    },
					{ 13, { 0x45, 0x46, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB }                                          },
					{ 12, { 0x44, 0x45, 0x54, 0x55, 0x59, 0x5A, 0x69, 0x95, 0x99, 0x9A, 0xA9, 0xAA }                                                },
					{ 14, { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xAE }                                    },
					{ 11, { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xAA }                                                      },
					{ 12, { 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x96, 0x9A, 0x9B, 0xAA, 0xAB }                                                },
					{ 15, { 0x44, 0x45, 0x49, 0x54, 0x55, 0x58, 0x59, 0x5A, 0x69, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE }                              },
					{ 13, { 0x45, 0x49, 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE }                                          },
					{ 12, { 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x99, 0x9A, 0x9E, 0xAA, 0xAE }                                                },
					{ 14, { 0x45, 0x4A, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x9A, 0x9B, 0x9E, 0xAA, 0xAB, 0xAE, 0xAF }                                    },
					{ 16, { 0x50, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x95, 0x96, 0x99, 0xA5, 0xA6, 0xA9, 0xAA }                        },
					{ 14, { 0x51, 0x55, 0x56, 0x59, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA }                                    },
					{ 14, { 0x51, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xAB }                                    },
					{ 13, { 0x51, 0x52, 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xA7, 0xAA, 0xAB }                                          },
					{ 14, { 0x54, 0x55, 0x56, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA }                                    },
					{ 16, { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA }                        },
					{ 16, { 0x15, 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB }                        },
					{ 10, { 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB }                                                            },
					{ 14, { 0x54, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAE }                                    },
					{ 16, { 0x15, 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE }                        },
					{ 19, { 0x15, 0x45, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE }      },
					{ 11, { 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB }                                                      },
					{ 13, { 0x54, 0x55, 0x58, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAD, 0xAE }                                          },
					{ 10, { 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE }                                                            },
					{ 11, { 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE }                                                      },
					{ 10, { 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF }                                                            },
					{ 12, { 0x50, 0x51, 0x54, 0x55, 0x65, 0x66, 0x69, 0x95, 0xA5, 0xA6, 0xA9, 0xAA }                                                },
					{ 14, { 0x51, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA }                                    },
					{ 11, { 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xAA }                                                      },
					{ 12, { 0x51, 0x52, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x96, 0xA6, 0xA7, 0xAA, 0xAB }                                                },
					{ 14, { 0x54, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA }                                    },
					{ 16, { 0x15, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA }                        },
					{ 19, { 0x15, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xBA }      },
					{ 11, { 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB }                                                      },
					{ 11, { 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA9, 0xAA }                                                      },
					{ 19, { 0x15, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xBA }      },
					{ 13, { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x9A, 0xA6, 0xA9, 0xAA }                                          },
					{ 14, { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x96, 0x9A, 0xA6, 0xAA, 0xAB }                                    },
					{ 12, { 0x54, 0x55, 0x58, 0x59, 0x65, 0x69, 0x6A, 0x99, 0xA9, 0xAA, 0xAD, 0xAE }                                                },
					{ 11, { 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE }                                                      },
					{ 14, { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x99, 0x9A, 0xA9, 0xAA, 0xAE }                                    },
					{ 13, { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x69, 0x6A, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF }                                          },
					{ 15, { 0x50, 0x51, 0x54, 0x55, 0x61, 0x64, 0x65, 0x66, 0x69, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA }                              },
					{ 13, { 0x51, 0x55, 0x61, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA }                                          },
					{ 12, { 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x6A, 0xA5, 0xA6, 0xAA, 0xB6, 0xBA }                                                },
					{ 14, { 0x51, 0x55, 0x56, 0x62, 0x65, 0x66, 0x6A, 0xA6, 0xA7, 0xAA, 0xAB, 0xB6, 0xBA, 0xBB }                                    },
					{ 13, { 0x54, 0x55, 0x64, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA }                                          },
					{ 10, { 0x55, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA }                                                            },
					{ 11, { 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA }                                                      },
					{ 10, { 0x55, 0x56, 0x65, 0x66, 0x6A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB }                                                            },
					{ 12, { 0x54, 0x55, 0x59, 0x64, 0x65, 0x69, 0x6A, 0xA5, 0xA9, 0xAA, 0xB9, 0xBA }                                                },
					{ 11, { 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA }                                                      },
					{ 14, { 0x15, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA }                                    },
					{ 13, { 0x15, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB }                                          },
					{ 14, { 0x54, 0x55, 0x59, 0x65, 0x68, 0x69, 0x6A, 0xA9, 0xAA, 0xAD, 0xAE, 0xB9, 0xBA, 0xBE }                                    },
					{ 10, { 0x55, 0x59, 0x65, 0x69, 0x6A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE }                                                            },
					{ 13, { 0x15, 0x55, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE }                                          },
					{ 13, { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0xAA, 0xAB, 0xAE, 0xBA, 0xBF }                                          },
					{ 16, { 0x40, 0x41, 0x44, 0x45, 0x50, 0x51, 0x54, 0x55, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA }                        },
					{ 12, { 0x41, 0x45, 0x51, 0x55, 0x56, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xAA }                                                },
					{ 10, { 0x41, 0x45, 0x51, 0x55, 0x56, 0x95, 0x96, 0x9A, 0xA6, 0xAA }                                                            },
					{ 14, { 0x41, 0x45, 0x46, 0x51, 0x52, 0x55, 0x56, 0x95, 0x96, 0x97, 0x9A, 0xA6, 0xAA, 0xAB }                                    },
					{ 12, { 0x44, 0x45, 0x54, 0x55, 0x59, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA9, 0xAA }                                                },
					{ 14, { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA }                                    },
					{ 11, { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA }                                                      },
					{ 12, { 0x45, 0x46, 0x55, 0x56, 0x5A, 0x95, 0x96, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB }                                                },
					{ 10, { 0x44, 0x45, 0x54, 0x55, 0x59, 0x95, 0x99, 0x9A, 0xA9, 0xAA }                                                            },
					{ 11, { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA }                                                      },
					{ 10, { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xAA }                                                            },
					{ 13, { 0x45, 0x46, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9B, 0xAA, 0xAB }                                          },
					{ 14, { 0x44, 0x45, 0x49, 0x54, 0x55, 0x58, 0x59, 0x95, 0x99, 0x9A, 0x9D, 0xA9, 0xAA, 0xAE }                                    },
					{ 12, { 0x45, 0x49, 0x55, 0x59, 0x5A, 0x95, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE }                                                },
					{ 13, { 0x45, 0x49, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9E, 0xAA, 0xAE }                                          },
					{ 15, { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x96, 0x99, 0x9A, 0x9B, 0x9E, 0xAA, 0xAB, 0xAE, 0xAF }                              },
					{ 12, { 0x50, 0x51, 0x54, 0x55, 0x65, 0x95, 0x96, 0x99, 0xA5, 0xA6, 0xA9, 0xAA }                                                },
					{ 14, { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA }                                    },
					{ 11, { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA }                                                      },
					{ 12, { 0x51, 0x52, 0x55, 0x56, 0x66, 0x95, 0x96, 0x9A, 0xA6, 0xA7, 0xAA, 0xAB }                                                },
					{ 14, { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA }                                    },
					{ 16, { 0x45, 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA }                        },
					{ 19, { 0x45, 0x51, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xEA }      },
					{ 11, { 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB }                                                      },
					{ 11, { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA }                                                      },
					{ 19, { 0x45, 0x54, 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xEA }      },
					{ 13, { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA }                                          },
					{ 14, { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xAB }                                    },
					{ 12, { 0x54, 0x55, 0x58, 0x59, 0x69, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAD, 0xAE }                                                },
					{ 11, { 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE }                                                      },
					{ 14, { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xAE }                                    },
					{ 13, { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x96, 0x99, 0x9A, 0xAA, 0xAB, 0xAE, 0xAF }                                          },
					{ 10, { 0x50, 0x51, 0x54, 0x55, 0x65, 0x95, 0xA5, 0xA6, 0xA9, 0xAA }                                                            },
					{ 11, { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA }                                                      },
					{ 10, { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xAA }                                                            },
					{ 13, { 0x51, 0x52, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB }                                          },
					{ 11, { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA }                                                      },
					{ 19, { 0x51, 0x54, 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA }      },
					{ 13, { 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA }                                          },
					{ 14, { 0x51, 0x55, 0x56, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xAB }                                    },
					{ 10, { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA }                                                            },
					{ 13, { 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA }                                          },
					{ 16, { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA }                        },
					{ 14, { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB }                                    },
					{ 13, { 0x54, 0x55, 0x58, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE }                                          },
					{ 14, { 0x54, 0x55, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAE }                                    },
					{ 14, { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAE }                                    },
					{ 16, { 0x55, 0x56, 0x59, 0x5A, 0x66, 0x69, 0x6A, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xAF }                        },
					{ 14, { 0x50, 0x51, 0x54, 0x55, 0x61, 0x64, 0x65, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xB5, 0xBA }                                    },
					{ 12, { 0x51, 0x55, 0x61, 0x65, 0x66, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA }                                                },
					{ 13, { 0x51, 0x55, 0x56, 0x61, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0xB6, 0xBA }                                          },
					{ 15, { 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x96, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB, 0xB6, 0xBA, 0xBB }                              },
					{ 12, { 0x54, 0x55, 0x64, 0x65, 0x69, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA }                                                },
					{ 11, { 0x55, 0x65, 0x66, 0x69, 0x6A, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA }                                                      },
					{ 14, { 0x51, 0x55, 0x56, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA }                                    },
					{ 13, { 0x51, 0x55, 0x56, 0x65, 0x66, 0x6A, 0x96, 0xA5, 0xA6, 0xAA, 0xAB, 0xBA, 0xBB }                                          },
					{ 13, { 0x54, 0x55, 0x59, 0x64, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xB9, 0xBA }                                          },
					{ 14, { 0x54, 0x55, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA }                                    },
					{ 14, { 0x55, 0x56, 0x59, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA }                                    },
					{ 16, { 0x55, 0x56, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xBA, 0xBB }                        },
					{ 15, { 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x99, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE, 0xB9, 0xBA, 0xBE }                              },
					{ 13, { 0x54, 0x55, 0x59, 0x65, 0x69, 0x6A, 0x99, 0xA5, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE }                                          },
					{ 16, { 0x55, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xBA, 0xBE }                        },
					{ 15, { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xBA }                              },
					{ 17, { 0x40, 0x45, 0x51, 0x54, 0x55, 0x85, 0x91, 0x94, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA }                  },
					{ 15, { 0x41, 0x45, 0x51, 0x55, 0x56, 0x85, 0x91, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xAA, 0xEA }                              },
					{ 14, { 0x41, 0x45, 0x51, 0x55, 0x56, 0x85, 0x91, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xD6, 0xEA }                                    },
					{ 17, { 0x41, 0x45, 0x51, 0x55, 0x56, 0x86, 0x92, 0x95, 0x96, 0x97, 0x9A, 0xA6, 0xAA, 0xAB, 0xD6, 0xEA, 0xEB }                  },
					{ 15, { 0x44, 0x45, 0x54, 0x55, 0x59, 0x85, 0x94, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xEA }                              },
					{ 13, { 0x45, 0x55, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xDA, 0xEA }                                          },
					{ 12, { 0x45, 0x55, 0x56, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xDA, 0xEA }                                                },
					{ 14, { 0x45, 0x55, 0x56, 0x86, 0x95, 0x96, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB, 0xDA, 0xEA, 0xEB }                                    },
					{ 14, { 0x44, 0x45, 0x54, 0x55, 0x59, 0x85, 0x94, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xD9, 0xEA }                                    },
					{ 12, { 0x45, 0x55, 0x59, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xDA, 0xEA }                                                },
					{ 13, { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x85, 0x95, 0x96, 0x99, 0x9A, 0xAA, 0xDA, 0xEA }                                          },
					{ 15, { 0x45, 0x55, 0x56, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9B, 0xA6, 0xAA, 0xAB, 0xDA, 0xEA, 0xEB }                              },
					{ 17, { 0x44, 0x45, 0x54, 0x55, 0x59, 0x89, 0x95, 0x98, 0x99, 0x9A, 0x9D, 0xA9, 0xAA, 0xAE, 0xD9, 0xEA, 0xEE }                  },
					{ 14, { 0x45, 0x55, 0x59, 0x89, 0x95, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE, 0xDA, 0xEA, 0xEE }                                    },
					{ 15, { 0x45, 0x55, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9E, 0xA9, 0xAA, 0xAE, 0xDA, 0xEA, 0xEE }                              },
					{ 17, { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0x9B, 0x9E, 0xAA, 0xAB, 0xAE, 0xDA, 0xEA, 0xEF }                  },
					{ 15, { 0x50, 0x51, 0x54, 0x55, 0x65, 0x91, 0x94, 0x95, 0x96, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA }                              },
					{ 13, { 0x51, 0x55, 0x91, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xE6, 0xEA }                                          },
					{ 12, { 0x51, 0x55, 0x56, 0x91, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xE6, 0xEA }                                                },
					{ 14, { 0x51, 0x55, 0x56, 0x92, 0x95, 0x96, 0x9A, 0xA6, 0xA7, 0xAA, 0xAB, 0xE6, 0xEA, 0xEB }                                    },
					{ 13, { 0x54, 0x55, 0x94, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xE9, 0xEA }                                          },
					{ 10, { 0x55, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA }                                                            },
					{ 11, { 0x55, 0x56, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA }                                                      },
					{ 10, { 0x55, 0x56, 0x95, 0x96, 0x9A, 0xA6, 0xAA, 0xAB, 0xEA, 0xEB }                                                            },
					{ 12, { 0x54, 0x55, 0x59, 0x94, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xE9, 0xEA }                                                },
					{ 11, { 0x55, 0x59, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA }                                                      },
					{ 14, { 0x45, 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA }                                    },
					{ 13, { 0x45, 0x55, 0x56, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xAA, 0xAB, 0xEA, 0xEB }                                          },
					{ 14, { 0x54, 0x55, 0x59, 0x95, 0x98, 0x99, 0x9A, 0xA9, 0xAA, 0xAD, 0xAE, 0xE9, 0xEA, 0xEE }                                    },
					{ 10, { 0x55, 0x59, 0x95, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE }                                                            },
					{ 13, { 0x45, 0x55, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE }                                          },
					{ 13, { 0x55, 0x56, 0x59, 0x5A, 0x95, 0x96, 0x99, 0x9A, 0xAA, 0xAB, 0xAE, 0xEA, 0xEF }                                          },
					{ 14, { 0x50, 0x51, 0x54, 0x55, 0x65, 0x91, 0x94, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xE5, 0xEA }                                    },
					{ 12, { 0x51, 0x55, 0x65, 0x91, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xE6, 0xEA }                                                },
					{ 13, { 0x51, 0x55, 0x56, 0x65, 0x66, 0x91, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0xE6, 0xEA }                                          },
					{ 15, { 0x51, 0x55, 0x56, 0x66, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB, 0xE6, 0xEA, 0xEB }                              },
					{ 12, { 0x54, 0x55, 0x65, 0x94, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xE9, 0xEA }                                                },
					{ 11, { 0x55, 0x65, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA }                                                      },
					{ 14, { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA }                                    },
					{ 13, { 0x51, 0x55, 0x56, 0x66, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xAA, 0xAB, 0xEA, 0xEB }                                          },
					{ 13, { 0x54, 0x55, 0x59, 0x65, 0x69, 0x94, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xE9, 0xEA }                                          },
					{ 14, { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA }                                    },
					{ 14, { 0x55, 0x56, 0x59, 0x65, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xEA }                                    },
					{ 16, { 0x55, 0x56, 0x5A, 0x66, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xEA, 0xEB }                        },
					{ 15, { 0x54, 0x55, 0x59, 0x69, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE, 0xE9, 0xEA, 0xEE }                              },
					{ 13, { 0x54, 0x55, 0x59, 0x69, 0x95, 0x99, 0x9A, 0xA5, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE }                                          },
					{ 16, { 0x55, 0x59, 0x5A, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xEA, 0xEE }                        },
					{ 15, { 0x55, 0x56, 0x59, 0x5A, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xEA }                              },
					{ 17, { 0x50, 0x51, 0x54, 0x55, 0x65, 0x95, 0xA1, 0xA4, 0xA5, 0xA6, 0xA9, 0xAA, 0xB5, 0xBA, 0xE5, 0xEA, 0xFA }                  },
					{ 14, { 0x51, 0x55, 0x65, 0x95, 0xA1, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA, 0xE6, 0xEA, 0xFA }                                    },
					{ 15, { 0x51, 0x55, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xB6, 0xBA, 0xE6, 0xEA, 0xFA }                              },
					{ 17, { 0x51, 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA7, 0xAA, 0xAB, 0xB6, 0xBA, 0xE6, 0xEA, 0xFB }                  },
					{ 14, { 0x54, 0x55, 0x65, 0x95, 0xA4, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA, 0xE9, 0xEA, 0xFA }                                    },
					{ 10, { 0x55, 0x65, 0x95, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA }                                                            },
					{ 13, { 0x51, 0x55, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA }                                          },
					{ 13, { 0x55, 0x56, 0x65, 0x66, 0x95, 0x96, 0xA5, 0xA6, 0xAA, 0xAB, 0xBA, 0xEA, 0xFB }                                          },
					{ 15, { 0x54, 0x55, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xB9, 0xBA, 0xE9, 0xEA, 0xFA }                              },
					{ 13, { 0x54, 0x55, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA }                                          },
					{ 16, { 0x55, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xBA, 0xEA, 0xFA }                        },
					{ 15, { 0x55, 0x56, 0x65, 0x66, 0x6A, 0x95, 0x96, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xBA, 0xEA }                              },
					{ 17, { 0x54, 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xAD, 0xAE, 0xB9, 0xBA, 0xE9, 0xEA, 0xFE }                  },
					{ 13, { 0x55, 0x59, 0x65, 0x69, 0x95, 0x99, 0xA5, 0xA9, 0xAA, 0xAE, 0xBA, 0xEA, 0xFE }                                          },
					{ 15, { 0x55, 0x59, 0x65, 0x69, 0x6A, 0x95, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAE, 0xBA, 0xEA }                              },
					{ 20, { 0x55, 0x56, 0x59, 0x5A, 0x65, 0x66, 0x69, 0x6A, 0x95, 0x96, 0x99, 0x9A, 0xA5, 0xA6, 0xA9, 0xAA, 0xAB, 0xAE, 0xBA, 0xEA }}
				};
				for (std::size_t i = 0; i < 256; ++i)
				{
					std::int64_t cx            = ((i >> 0) & 3) - 1;
					std::int64_t cy            = ((i >> 2) & 3) - 1;
					std::int64_t cz            = ((i >> 4) & 3) - 1;
					std::int64_t cw            = ((i >> 6) & 3) - 1;
					s_SmoothLatticePoints4D[i] = NewLatticePoint4DS(cx, cy, cz, cw);
				}
				for (std::size_t i = 0; i < 256; ++i)
				{
					LatticeVec4DS& vec = s_SmoothLatticeVecs4D[i];
					vec.length         = lut[i].length;
					for (std::size_t j = 0; j < 20; ++j)
					{
						vec.data[j] = j < vec.length ? &s_SmoothLatticePoints4D[lut[i].data[j]] : nullptr;
					}
				}
			}
		}

		LatticePoint2D NewLatticePoint2D(std::int64_t xsv, std::int64_t ysv)
		{
			LatticePoint2D point {};
			point.xsv  = xsv;
			point.ysv  = ysv;
			double ssv = (xsv + ysv) * -0.211324865405187;
			point.dx   = -xsv - ssv;
			point.dy   = -ysv - ssv;
			return point;
		}

		LatticePoint3D NewLatticePoint3D(std::int64_t xrv, std::int64_t yrv, std::int64_t zrv, std::int64_t lattice)
		{
			LatticePoint3D point {};
			point.dxr = -xrv + lattice * 0.5;
			point.dyr = -yrv + lattice * 0.5;
			point.dzr = -zrv + lattice * 0.5;
			point.xrv = xrv + lattice * 1024;
			point.yrv = yrv + lattice * 1024;
			point.zrv = zrv + lattice * 1024;
			return point;
		}

		LatticePoint4DF NewLatticePoint4DF(std::int64_t xsv, std::int64_t ysv, std::int64_t zsv, std::int64_t wsv)
		{
			LatticePoint4DF point {};
			point.xsv      = xsv + 409;
			point.ysv      = ysv + 409;
			point.zsv      = zsv + 409;
			point.wsv      = wsv + 409;
			double ssv     = (xsv + ysv + zsv + wsv) * 0.309016994374947;
			point.dx       = -xsv - ssv;
			point.dy       = -ysv - ssv;
			point.dz       = -zsv - ssv;
			point.dw       = -wsv - ssv;
			point.xsi      = 0.2 - xsv;
			point.ysi      = 0.2 - ysv;
			point.zsi      = 0.2 - zsv;
			point.wsi      = 0.2 - wsv;
			point.ssiDelta = (0.8 - xsv - ysv - zsv - wsv) * 0.309016994374947;
			return point;
		}

		LatticePoint4DS NewLatticePoint4DS(std::int64_t xsv, std::int64_t ysv, std::int64_t zsv, std::int64_t wsv)
		{
			LatticePoint4DS point {};
			point.xsv  = xsv + 409;
			point.ysv  = ysv + 409;
			point.zsv  = zsv + 409;
			point.wsv  = wsv + 409;
			double ssv = (xsv + ysv + zsv + wsv) * -0.138196601125011;
			point.dx   = -xsv - ssv;
			point.dy   = -ysv - ssv;
			point.dz   = -zsv - ssv;
			point.dw   = -wsv - ssv;
			return point;
		}
	} s_Init;

	static constexpr std::int64_t FastFloor(double x)
	{
		std::int64_t xi = static_cast<std::int64_t>(x);
		return x < xi ? xi - 1 : xi;
	}

	Noise2D::Noise2D(std::uint64_t seed, bool smooth)
		: m_Seed(seed),
		  m_Smooth(smooth),
		  m_Changed(true),
		  m_LatticePoints(nullptr),
		  m_Iters(0),
		  m_R(0.0),
		  m_State(new State {}) {}

	Noise2D::Noise2D(Noise2D&& move) noexcept
		: m_Seed(move.m_Seed),
		  m_Smooth(move.m_Smooth),
		  m_Changed(move.m_Changed),
		  m_LatticePoints(move.m_LatticePoints),
		  m_Iters(move.m_Iters),
		  m_R(move.m_R),
		  m_State(move.m_State)
	{
		move.m_State = nullptr;
	}

	Noise2D::~Noise2D()
	{
		delete m_State;
	}

	void Noise2D::SetSeed(std::uint64_t seed)
	{
		m_Seed    = seed;
		m_Changed = true;
	}

	std::uint64_t Noise2D::GetSeed() const
	{
		return m_Seed;
	}

	void Noise2D::SetSmooth(bool smooth)
	{
		m_Smooth  = smooth;
		m_Changed = true;
	}

	bool Noise2D::IsSmooth() const
	{
		return m_Smooth;
	}

	double Noise2D::Sample(double x, double y)
	{
		if (m_Changed)
			Setup();

		double s  = 0.366025403784439 * (x + y);
		double xs = x + s;
		double ys = y + s;
		return SampleBase(xs, ys);
	}

	double Noise2D::SampleXBeforeY(double x, double y)
	{
		if (m_Changed)
			Setup();

		double xx = x * 0.7071067811865476;
		double yy = y * 1.224744871380249;
		return SampleBase(yy + xx, yy - xx);
	}

	void Noise2D::Setup()
	{
		m_Changed       = false;
		m_LatticePoints = m_Smooth ? s_SmoothLatticePoints2D : s_LatticePoints2D;
		m_Iters         = m_Smooth ? 4 : 3;
		m_R             = m_Smooth ? 2.0 / 3.0 : 0.5;

		Grad2D*       grads = m_Smooth ? s_SmoothGrad2Ds : s_Grad2Ds;
		std::uint64_t seed  = m_Seed;
		std::uint16_t source[2048];
		for (std::uint16_t i = 0; i < 2048; ++i)
			source[i] = i;
		for (std::int64_t i = 2047; i >= 0; --i)
		{
			seed           = seed * 6364136223846793005L + 1442695040888963407L;
			std::int64_t r = (std::int64_t)((seed + 31) % (i + 1));
			if (r < 0)
				r += (i + 1);
			m_State->Perm[i]      = source[r];
			m_State->PermGrads[i] = grads[m_State->Perm[i]];
			source[r]             = source[i];
		}
	}

	double Noise2D::SampleBase(double xs, double ys)
	{
		std::int64_t xsb = FastFloor(xs);
		std::int64_t ysb = FastFloor(ys);
		double       xsi = xs - xsb;
		double       ysi = ys - ysb;

		std::int64_t index = 0;
		if (m_Smooth)
		{
			std::int64_t a = static_cast<std::int64_t>(xsi + ysi);

			index = (a << 2) |
					static_cast<std::int64_t>(xsi - ysi / 2 + 1 - a / 2.0) << 3 |
					static_cast<std::int64_t>(ysi - xsi / 2 + 1 - a / 2.0) << 4;
		}
		else
		{
			index = static_cast<std::int64_t>((ysi - xsi) / 2 + 1);
		}

		double ssi = (xsi + ysi) * -0.211324865405187;
		double xi  = xsi + ssi;
		double yi  = ysi + ssi;

		double value = 0;
		for (std::size_t i = 0; i < m_Iters; ++i)
		{
			LatticePoint2D& c = m_LatticePoints[index + i];

			double dx   = xi + c.dx;
			double dy   = yi + c.dy;
			double attn = m_R - dx * dx - dy * dy;
			if (attn <= 0)
				continue;

			std::int64_t pxm           = (xsb + c.xsv) & 2047;
			std::int64_t pym           = (ysb + c.ysv) & 2047;
			Grad2D       grad          = m_State->PermGrads[m_State->Perm[pxm] ^ pym];
			double       extrapolation = grad.dx * dx + grad.dy * dy;

			attn  *= attn;
			value += attn * attn * extrapolation;
		}
		return value;
	}

	Noise3D::Noise3D(std::uint64_t seed, bool smooth)
		: m_Seed(seed),
		  m_Smooth(smooth),
		  m_Changed(true),
		  m_LatticePoints(nullptr),
		  m_R(0.0),
		  m_State(new State {})
	{
	}

	Noise3D::Noise3D(Noise3D&& move) noexcept
		: m_Seed(move.m_Seed),
		  m_Smooth(move.m_Smooth),
		  m_Changed(move.m_Changed),
		  m_LatticePoints(move.m_LatticePoints),
		  m_R(move.m_R),
		  m_State(move.m_State)
	{
		move.m_State = nullptr;
	}

	Noise3D::~Noise3D()
	{
		delete m_State;
	}

	void Noise3D::SetSeed(std::uint64_t seed)
	{
		m_Seed    = seed;
		m_Changed = true;
	}

	std::uint64_t Noise3D::GetSeed() const
	{
		return m_Seed;
	}

	void Noise3D::SetSmooth(bool smooth)
	{
		m_Smooth  = smooth;
		m_Changed = true;
	}

	bool Noise3D::IsSmooth() const
	{
		return m_Smooth;
	}

	double Noise3D::Sample(double x, double y, double z)
	{
		if (m_Changed)
			Setup();

		double r  = 2.0 / 3.0 * (x + y + z);
		double xr = r - x;
		double yr = r - y;
		double zr = r - z;

		return SampleBCC(xr, yr, zr);
	}

	double Noise3D::SampleXYBeforeZ(double x, double y, double z)
	{
		if (m_Changed)
			Setup();

		double xy = x + y;
		double s2 = xy * -0.211324865405187;
		double zz = z * 0.577350269189626;
		double xr = x + s2 - zz;
		double yr = y + s2 - zz;
		double zr = xy * 0.577350269189626 + zz;

		return SampleBCC(xr, yr, zr);
	}

	double Noise3D::SampleXZBeforeY(double x, double y, double z)
	{
		if (m_Changed)
			Setup();

		double xz = x + z;
		double s2 = xz * -0.211324865405187;
		double yy = y * 0.577350269189626;
		double xr = x + s2 - yy;
		double zr = z + s2 - yy;
		double yr = xz * 0.577350269189626 + yy;

		return SampleBCC(xr, yr, zr);
	}

	void Noise3D::Setup()
	{
		m_Changed       = false;
		m_LatticePoints = m_Smooth ? s_SmoothLatticePoints3D : s_LatticePoints3D;
		m_R             = m_Smooth ? 0.75 : 0.5;

		Grad3D*       grads = m_Smooth ? s_SmoothGrad3Ds : s_Grad3Ds;
		std::uint64_t seed  = m_Seed;
		std::uint16_t source[2048];
		for (std::uint16_t i = 0; i < 2048; ++i)
			source[i] = i;
		for (std::int64_t i = 2047; i >= 0; --i)
		{
			seed           = seed * 6364136223846793005L + 1442695040888963407L;
			std::int64_t r = (std::int64_t)((seed + 31) % (i + 1));
			if (r < 0)
				r += (i + 1);
			m_State->Perm[i]      = source[r];
			m_State->PermGrads[i] = grads[m_State->Perm[i]];
			source[r]             = source[i];
		}
	}

	double Noise3D::SampleBCC(double xr, double yr, double zr)
	{
		std::int64_t xrb = FastFloor(xr);
		std::int64_t yrb = FastFloor(yr);
		std::int64_t zrb = FastFloor(zr);
		double       xri = xr - xrb;
		double       yri = yr - yrb;
		double       zri = zr - zrb;

		std::int64_t xht   = (std::int64_t)(xri + 0.5);
		std::int64_t yht   = (std::int64_t)(yri + 0.5);
		std::int64_t zht   = (std::int64_t)(zri + 0.5);
		std::int64_t index = (xht << 0) | (yht << 1) | (zht << 2);

		double          value = 0;
		LatticePoint3D* c     = &m_LatticePoints[index];
		while (c != nullptr)
		{
			double dxr  = xri + c->dxr;
			double dyr  = yri + c->dyr;
			double dzr  = zri + c->dzr;
			double attn = m_R - dxr * dxr - dyr * dyr - dzr * dzr;
			if (attn < 0)
			{
				c = c->nextOnFailure;
			}
			else
			{
				std::int64_t pxm           = (xrb + c->xrv) & 2047;
				std::int64_t pym           = (yrb + c->yrv) & 2047;
				std::int64_t pzm           = (zrb + c->zrv) & 2047;
				Grad3D       grad          = m_State->PermGrads[m_State->Perm[m_State->Perm[pxm] ^ pym] ^ pzm];
				double       extrapolation = grad.dx * dxr + grad.dy * dyr + grad.dz * dzr;

				attn  *= attn;
				value += attn * attn * extrapolation;
				c     = c->nextOnSuccess;
			}
		}
		return value;
	}

	Noise4D::Noise4D(std::uint64_t seed, bool smooth)
		: m_Seed(seed),
		  m_Smooth(smooth),
		  m_Changed(true),
		  m_LatticePointsF(nullptr),
		  m_LatticePointsS(nullptr),
		  m_F(0.0),
		  m_F1(0.0),
		  m_F2(0.0),
		  m_F3(0.0),
		  m_F4(0.0),
		  m_F5(0.0),
		  m_State(new State {})
	{
	}

	Noise4D::Noise4D(Noise4D&& move) noexcept
		: m_Seed(move.m_Seed),
		  m_Smooth(move.m_Smooth),
		  m_Changed(move.m_Changed),
		  m_LatticePointsF(move.m_LatticePointsF),
		  m_LatticePointsS(move.m_LatticePointsS),
		  m_F(move.m_F),
		  m_F1(move.m_F1),
		  m_F2(move.m_F2),
		  m_F3(move.m_F3),
		  m_F4(move.m_F4),
		  m_F5(move.m_F5),
		  m_State(move.m_State)
	{
		move.m_State = nullptr;
	}

	Noise4D::~Noise4D()
	{
		delete m_State;
	}

	void Noise4D::SetSeed(std::uint64_t seed)
	{
		m_Seed    = seed;
		m_Changed = true;
	}

	std::uint64_t Noise4D::GetSeed() const
	{
		return m_Seed;
	}

	void Noise4D::SetSmooth(bool smooth)
	{
		m_Smooth  = smooth;
		m_Changed = true;
	}

	bool Noise4D::IsSmooth() const
	{
		return m_Smooth;
	}

	double Noise4D::Sample(double x, double y, double z, double w)
	{
		if (m_Changed)
			Setup();

		double s  = m_F * (x + y + z + w);
		double xs = x + s;
		double ys = y + s;
		double zs = z + s;
		double ws = w + s;

		return SampleBase(xs, ys, zs, ws);
	}

	double Noise4D::SampleXYBeforeZW(double x, double y, double z, double w)
	{
		if (m_Changed)
			Setup();

		double s2 = (x + y) * m_F1 + (z + w) * m_F2;
		double t2 = (z + w) * m_F3 + (x + y) * m_F4;
		double xs = x + s2;
		double ys = y + s2;
		double zs = z + t2;
		double ws = w + t2;

		return SampleBase(xs, ys, zs, ws);
	}

	double Noise4D::SampleXZBeforeYW(double x, double y, double z, double w)
	{
		if (m_Changed)
			Setup();

		double s2 = (x + z) * m_F1 + (y + w) * m_F2;
		double t2 = (y + w) * m_F3 + (x + z) * m_F4;
		double xs = x + s2;
		double ys = y + t2;
		double zs = z + s2;
		double ws = w + t2;

		return SampleBase(xs, ys, zs, ws);
	}

	double Noise4D::SampleXYZBeforeW(double x, double y, double z, double w)
	{
		if (m_Changed)
			Setup();

		double xyz = x + y + z;
		double ww  = w * m_F5;
		double s2  = xyz * -0.16666666666666666 + ww;
		double xs  = x + s2;
		double ys  = y + s2;
		double zs  = z + s2;
		double ws  = -0.5 * xyz + ww;

		return SampleBase(xs, ys, zs, ws);
	}

	void Noise4D::Setup()
	{
		m_Changed        = false;
		m_LatticePointsF = m_Smooth ? nullptr : s_LatticePoints4D;
		m_LatticePointsS = m_Smooth ? s_SmoothLatticeVecs4D : nullptr;
		m_F              = m_Smooth ? 0.309016994374947 : -0.138196601125011;
		m_F1             = m_Smooth ? -0.28522513987434876941 : -0.178275657951399372;
		m_F2             = m_Smooth ? 0.83897065470611435718 : 0.215623393288842828;
		m_F3             = m_Smooth ? 0.21939749883706435719 : -0.403949762580207112;
		m_F4             = m_Smooth ? -0.48214856493302476942 : -0.375199083010075342;
		m_F5             = m_Smooth ? 1.118033988749894 : 0.2236067977499788;

		Grad4D*       grads = m_Smooth ? s_SmoothGrad4Ds : s_Grad4Ds;
		std::uint64_t seed  = m_Seed;
		std::uint16_t source[2048];
		for (std::uint16_t i = 0; i < 2048; ++i)
			source[i] = i;
		for (std::int64_t i = 2047; i >= 0; --i)
		{
			seed           = seed * 6364136223846793005L + 1442695040888963407L;
			std::int64_t r = (std::int64_t)((seed + 31) % (i + 1));
			if (r < 0)
				r += (i + 1);
			m_State->Perm[i]      = source[r];
			m_State->PermGrads[i] = grads[m_State->Perm[i]];
			source[r]             = source[i];
		}
	}

	double Noise4D::SampleBase(double xs, double ys, double zs, double ws)
	{
		double value = 0;

		std::int64_t xsb = FastFloor(xs);
		std::int64_t ysb = FastFloor(ys);
		std::int64_t zsb = FastFloor(zs);
		std::int64_t wsb = FastFloor(ws);
		double       xsi = xs - xsb;
		double       ysi = ys - ysb;
		double       zsi = zs - zsb;
		double       wsi = ws - wsb;

		if (m_Smooth)
		{
			double ssi = (xsi + ysi + zsi + wsi) * -0.138196601125011;
			double xi = xsi + ssi, yi = ysi + ssi, zi = zsi + ssi, wi = wsi + ssi;

			int index = ((FastFloor(xs * 4) & 3) << 0) | ((FastFloor(ys * 4) & 3) << 2) | ((FastFloor(zs * 4) & 3) << 4) | ((FastFloor(ws * 4) & 3) << 6);

			// Point contributions
			LatticePoint4DS** c = m_LatticePointsS[index].data;
			for (int i = 0; i < m_LatticePointsS[index].length; ++i, ++c)
			{
				double dx   = xi + (*c)->dx;
				double dy   = yi + (*c)->dy;
				double dz   = zi + (*c)->dz;
				double dw   = wi + (*c)->dw;
				double attn = 0.8 - dx * dx - dy * dy - dz * dz - dw * dw;
				if (attn > 0)
				{
					attn *= attn;

					std::int64_t pxm           = (xsb + (*c)->xsv) & 2047;
					std::int64_t pym           = (ysb + (*c)->ysv) & 2047;
					std::int64_t pzm           = (zsb + (*c)->zsv) & 2047;
					std::int64_t pwm           = (wsb + (*c)->wsv) & 2047;
					Grad4D       grad          = m_State->PermGrads[m_State->Perm[m_State->Perm[m_State->Perm[pxm] ^ pym] ^ pzm] ^ pwm];
					double       extrapolation = grad.dx * dx + grad.dy * dy + grad.dz * dz + grad.dw * dw;

					value += attn * attn * extrapolation;
				}
			}
		}
		else
		{
			double siSum       = xsi + ysi + zsi + wsi;
			double ssi         = siSum * 0.309016994374947;
			bool   inLowerHalf = (siSum < 2);
			if (inLowerHalf)
			{
				xsi   = 1 - xsi;
				ysi   = 1 - ysi;
				zsi   = 1 - zsi;
				wsi   = 1 - wsi;
				siSum = 4 - siSum;
			}

			double aabb      = xsi + ysi - zsi - wsi;
			double abab      = xsi - ysi + zsi - wsi;
			double abba      = xsi - ysi - zsi + wsi;
			double aabbScore = std::abs(aabb);
			double ababScore = std::abs(abab);
			double abbaScore = std::abs(abba);

			std::int64_t vertexIndex, via, vib;
			double       asi, bsi;
			if (aabbScore > ababScore && aabbScore > abbaScore)
			{
				if (aabb > 0)
				{
					asi         = zsi;
					bsi         = wsi;
					vertexIndex = 0b0011;
					via         = 0b0111;
					vib         = 0b1011;
				}
				else
				{
					asi         = xsi;
					bsi         = ysi;
					vertexIndex = 0b1100;
					via         = 0b1101;
					vib         = 0b1110;
				}
			}
			else if (ababScore > abbaScore)
			{
				if (abab > 0)
				{
					asi         = ysi;
					bsi         = wsi;
					vertexIndex = 0b0101;
					via         = 0b0111;
					vib         = 0b1101;
				}
				else
				{
					asi         = xsi;
					bsi         = zsi;
					vertexIndex = 0b1010;
					via         = 0b1011;
					vib         = 0b1110;
				}
			}
			else
			{
				if (abba > 0)
				{
					asi         = ysi;
					bsi         = zsi;
					vertexIndex = 0b1001;
					via         = 0b1011;
					vib         = 0b1101;
				}
				else
				{
					asi         = xsi;
					bsi         = wsi;
					vertexIndex = 0b0110;
					via         = 0b0111;
					vib         = 0b1110;
				}
			}
			if (bsi > asi)
			{
				via         = vib;
				double temp = bsi;
				bsi         = asi;
				asi         = temp;
			}
			if (siSum + asi > 3)
			{
				vertexIndex = via;
				if (siSum + bsi > 4)
				{
					vertexIndex = 0b1111;
				}
			}

			if (inLowerHalf)
			{
				xsi         = 1 - xsi;
				ysi         = 1 - ysi;
				zsi         = 1 - zsi;
				wsi         = 1 - wsi;
				vertexIndex ^= 0b1111;
			}

			for (std::size_t i = 0; i < 5; ++i)
			{
				// Update xsb/etc. and add the lattice point's contribution.
				LatticePoint4DF& c = m_LatticePointsF[vertexIndex];
				xsb                += c.xsv;
				ysb                += c.ysv;
				zsb                += c.zsv;
				wsb                += c.wsv;
				double xi          = xsi + ssi;
				double yi          = ysi + ssi;
				double zi          = zsi + ssi;
				double wi          = wsi + ssi;
				double dx          = xi + c.dx;
				double dy          = yi + c.dy;
				double dz          = zi + c.dz;
				double dw          = wi + c.dw;
				double attn        = 0.5 - dx * dx - dy * dy - dz * dz - dw * dw;
				if (attn > 0)
				{
					std::int64_t pxm    = xsb & 2047;
					std::int64_t pym    = ysb & 2047;
					std::int64_t pzm    = zsb & 2047;
					std::int64_t pwm    = wsb & 2047;
					Grad4D       grad   = m_State->PermGrads[m_State->Perm[m_State->Perm[m_State->Perm[pxm] ^ pym] ^ pzm] ^ pwm];
					double       ramped = grad.dx * dx + grad.dy * dy + grad.dz * dz + grad.dw * dw;

					attn  *= attn;
					value += attn * attn * ramped;
				}

				if (i == 4)
					break;

				xsi += c.xsi;
				ysi += c.ysi;
				zsi += c.zsi;
				wsi += c.wsi;
				ssi += c.ssiDelta;

				double score0 = 1.0 + ssi * (-1.0 / 0.309016994374947);
				vertexIndex   = 0b0000;
				if (xsi >= ysi && xsi >= zsi && xsi >= wsi && xsi >= score0)
				{
					vertexIndex = 0b0001;
				}
				else if (ysi > xsi && ysi >= zsi && ysi >= wsi && ysi >= score0)
				{
					vertexIndex = 0b0010;
				}
				else if (zsi > xsi && zsi > ysi && zsi >= wsi && zsi >= score0)
				{
					vertexIndex = 0b0100;
				}
				else if (wsi > xsi && wsi > ysi && wsi > zsi && wsi >= score0)
				{
					vertexIndex = 0b1000;
				}
			}
		}
		return value;
	}
} // namespace SimplexNoise